

SQL> --DTS2019042509188,this sql syntax is not supported by mysql or oracle,so the case is here..
SQL> select 1 from (select convert(extract(year from systimestamp),int)); 

1           
------------
1           

1 rows fetched.

SQL> select 1 from (select convert(extract(year from systimestamp),uint));

1           
------------
1           

1 rows fetched.

SQL> 
SQL> --DTS2019041811982
SQL> select CHR(65::uint) from dual;

CHR(65::UINT)
-------------
A            

1 rows fetched.

SQL> select CHAR(65::uint) from dual;

CHAR(65::UINT)
--------------
A             

1 rows fetched.

SQL> select CAST(45::uint as int) from dual;

CAST(45::UINT AS INT)
---------------------
45                   

1 rows fetched.

SQL> select CONVERT(65::uint,int) from dual;

CONVERT(65::UINT,INT)
---------------------
65                   

1 rows fetched.

SQL> 
SQL> --DTS2019041009255
SQL> drop table if exists t_timestamp_table;

Succeed.

SQL> create table t_timestamp_table(
  2 c_id int,
  3 c_bool bool, c_boolean boolean, c_bigint bigint,
  4 c_real real, 
  5 c_date number default timestampdiff(SQL_TSI_FRAC_SECOND,'7898-03-10 12:01:23.000001','7898-03-10 12:01:23.000000'),
  6 c_datetime datetime ,
  7 c_timestamp number
  8 ) ;

Succeed.

SQL> insert into t_timestamp_table(c_id) values(1);

1 rows affected.

SQL> select * from t_timestamp_table;

C_ID         C_BOOL C_BOOLEAN C_BIGINT             C_REAL               C_DATE                                   C_DATETIME             C_TIMESTAMP                             
------------ ------ --------- -------------------- -------------------- ---------------------------------------- ---------------------- ----------------------------------------
1                                                                       -1                                                                                                      

1 rows fetched.

SQL> drop table if exists t_timestamp_table;

Succeed.

SQL> create table t_timestamp_table(
  2 c_id int,
  3 c_bool bool, c_boolean boolean, c_bigint bigint,
  4 c_real real, 
  5 c_date date default timestampadd(month, 1,'7898-03-10 12:01:23.000000'),
  6 c_datetime datetime ,
  7 c_timestamp number
  8 ) ;

Succeed.

SQL> insert into t_timestamp_table(c_id) values(1);

1 rows affected.

SQL> select * from t_timestamp_table;

C_ID         C_BOOL C_BOOLEAN C_BIGINT             C_REAL               C_DATE                 C_DATETIME             C_TIMESTAMP                             
------------ ------ --------- -------------------- -------------------- ---------------------- ---------------------- ----------------------------------------
1                                                                       7898-04-10 12:01:23                                                                   

1 rows fetched.

SQL> drop table if exists t_timestamp_table;

Succeed.

SQL> 
SQL> --TEST datatype
SQL> select 100 + 483645 from dual;

100 + 483645        
--------------------
483745              

1 rows fetched.

SQL> select 100 + 2147483645 from dual;

100 + 2147483645    
--------------------
2147483745          

1 rows fetched.

SQL> select 100 + 9223372036854775103 from dual;

100 + 9223372036854775103
-------------------------
9223372036854775203      

1 rows fetched.

SQL> select 100 + 9223372036854775803 from dual;

CT-00659, [1:12]BIGINT out of range
SQL> select '9223371000000000000.000'::number::bigint from dual;

'9223371000000000000.000'::NUMBER::BIGINT
-----------------------------------------
9223371000000000000                      

1 rows fetched.

SQL> select '9223371000000000000.500'::number::bigint from dual;

'9223371000000000000.500'::NUMBER::BIGINT
-----------------------------------------
9223371000000000001                      

1 rows fetched.

SQL> select '9223371000000000000.005'::number::bigint from dual;

'9223371000000000000.005'::NUMBER::BIGINT
-----------------------------------------
9223371000000000000                      

1 rows fetched.

SQL> 
SQL> --date
SQL> drop table if exists test_temp_t1;

Succeed.

SQL> create table test_temp_t1(f1 date, f2 datetime, f3 timestamp);

Succeed.

SQL> insert into test_temp_t1(f1,f2,f3) values(sysdate, sysdate, sysdate);

1 rows affected.

SQL> insert into test_temp_t1(f1,f2,f3) values(sysdate, curdate, systimestamp);

1 rows affected.

SQL> insert into test_temp_t1(f1,f2,f3) values(sysdate, current_date, current_timestamp);

1 rows affected.

SQL> commit;

Succeed.

SQL> select to_char(to_date('20171216165511','yyyymmddhh24miss'),'yyyy-mm-dd hh24:mi:ss') from dual;

TO_CHAR(TO_DATE('20171216165511','YYYYMMDDHH24MISS'),'YYYY-MM-DD
----------------------------------------------------------------
2017-12-16 16:55:11                                             

1 rows fetched.

SQL> SELECT TO_TIMESTAMP('08-JAN-2018 11:17:18','DD-MON-YYYY HH:MI:SS') FROM DUAL;

TO_TIMESTAMP('08-JAN-2018 11:17:18','DD-MON-YYYY HH:MI:SS')
-----------------------------------------------------------
2018-01-08 11:17:18.000000                                 

1 rows fetched.

SQL> SELECT TO_TIMESTAMP('08-JAN-2018 11:17:18','DD-MON-YYYY HH12:MI:SS') FROM DUAL;

TO_TIMESTAMP('08-JAN-2018 11:17:18','DD-MON-YYYY HH12:MI:SS')
-------------------------------------------------------------
2018-01-08 11:17:18.000000                                   

1 rows fetched.

SQL> SELECT TO_TIMESTAMP('08-JAN-2018 12:17:18','DD-MON-YYYY HH12:MI:SS') FROM DUAL;

TO_TIMESTAMP('08-JAN-2018 12:17:18','DD-MON-YYYY HH12:MI:SS')
-------------------------------------------------------------
2018-01-08 12:17:18.000000                                   

1 rows fetched.

SQL> SELECT TO_TIMESTAMP('08-JAN-2018 00:17:18','DD-MON-YYYY HH12:MI:SS') FROM DUAL;

CT-00105, [1:8]Invalid format of datetime
SQL> SELECT TO_TIMESTAMP('08-JAN-2018 01:17:18','DD-MON-YYYY HH12:MI:SS') FROM DUAL;

TO_TIMESTAMP('08-JAN-2018 01:17:18','DD-MON-YYYY HH12:MI:SS')
-------------------------------------------------------------
2018-01-08 01:17:18.000000                                   

1 rows fetched.

SQL> SELECT TO_TIMESTAMP('08-JAN-2018 23:17:18','DD-MON-YYYY HH12:MI:SS') FROM DUAL;

CT-00105, [1:8]Invalid format of datetime
SQL> UPDATE test_temp_t1 SET f2 = 2.2;

CT-00606, [1:30]Inconsistent datatypes, expected DATE - got NUMBER
SQL> -- compare with string
SQL> select count(*) from test_temp_t1 where f1='2012-12-12 12:12:12' and f3='2012-12-12 12:12:12';

COUNT(*)            
--------------------
0                   

1 rows fetched.

SQL> drop table test_temp_t1;

Succeed.

SQL> 
SQL> --integer
SQL> drop table if exists test_temp_t1;

Succeed.

SQL> create table test_temp_t1(f1 bool, f2 int, f3 integer, f4 bigint, f5 serial primary key, f6 varchar(5), f7 date);

Succeed.

SQL> select * from test_temp_t1;

F1     F2           F3           F4                   F5                   F6    F7                    
------ ------------ ------------ -------------------- -------------------- ----- ----------------------

0 rows fetched.

SQL> insert into test_temp_t1 values(null, null, NULL, NULL, null,null, null);

1 rows affected.

SQL> select * from test_temp_t1;

F1     F2           F3           F4                   F5                   F6    F7                    
------ ------------ ------------ -------------------- -------------------- ----- ----------------------
                                                      1                                                

1 rows fetched.

SQL> insert into test_temp_t1 values(1, 2, 3, 4, 5, null, null);

1 rows affected.

SQL> select f1+f2+f3+f4+f5 from test_temp_t1;

CT-01320, [1:19]Undefined operator: BOOLEAN + BINARY_INTEGER
SQL> insert into test_temp_t1 values(1, 2147483647, -2147483648, null, null, null,null);

1 rows affected.

SQL> select * from test_temp_t1 where f2 > 'A';

CT-00636, Invalid number -- unexpected character
SQL> insert into test_temp_t1 values(0, 2, NULL, 9223372036854775807, -9223372036854775808, null, null);

1 rows affected.

SQL> insert into test_temp_t1 values(0, 2, NULL, 9223372036854775808, -9223372036854775809, null, null);

CT-00659, BIGINT out of range
SQL> insert into test_temp_t1 values(0, 2147483648, NULL, NULL, NULL, null, null);

CT-00659, INTEGER out of range
SQL> insert into test_temp_t1 values(0, -2147483649, NULL, NULL, NULL, null, null);

CT-00659, INTEGER out of range
SQL> insert into test_temp_t1 values(0, null, NULL, 9223372036854775808, NULL, null, null);

CT-00659, BIGINT out of range
SQL> insert into test_temp_t1 values(0, null, NULL, -9223372036854775809, NULL, null, null);

CT-00659, BIGINT out of range
SQL> insert INTO test_temp_t1(f4) VALUES(-7777777 * -19223372036854775809);

CT-00659, BIGINT out of range
SQL> select * from test_temp_t1;

F1     F2           F3           F4                   F5                   F6    F7                    
------ ------------ ------------ -------------------- -------------------- ----- ----------------------
                                                      1                                                
TRUE   2            3            4                    5                                                
TRUE   2147483647   -2147483648                       6                                                
FALSE  2                         9223372036854775807  -9223372036854775808                             

4 rows fetched.

SQL> 
SQL> insert INTO test_temp_t1(f7) values(sysdate);

1 rows affected.

SQL> UPDATE test_temp_t1 SET f7 = 0 WHERE f2 < 4.444;

CT-00606, [1:30]Inconsistent datatypes, expected DATE - got BINARY_INTEGER
SQL> UPDATE test_temp_t1 SET f3 = 666666 WHERE f7 = -2.2;

CT-00606, [1:48]Inconsistent datatypes, expected DATE - got NUMBER
SQL> UPDATE test_temp_t1 SET f1 = 1 WHERE f2 > 'exzpbt';

CT-00636, Invalid number -- unexpected character
SQL> 
SQL> drop table test_temp_t1;

Succeed.

SQL> 
SQL> 
SQL> drop table if exists test_temp_t1;

Succeed.

SQL> create table test_temp_t1(f1 double, f2 float, f3 real);

Succeed.

SQL> insert into test_temp_t1 values(null, null, NULL);

1 rows affected.

SQL> insert into test_temp_t1 values(1, 0.001, 123.456);      

1 rows affected.

SQL> select * from test_temp_t1;

F1                   F2                   F3                  
-------------------- -------------------- --------------------
                                                              
1                    0.001                123.456             

2 rows fetched.

SQL> drop table test_temp_t1;

Succeed.

SQL> 
SQL> --test in ct_decimal.sql  number/number same as decimal
SQL> drop table if exists test_temp_t1;

Succeed.

SQL> create table test_temp_t1(f1 decimal(20,5));

Succeed.

SQL> insert into test_temp_t1(f1) values(12345678.0123456789);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(1.111);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(1.12345);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(1.123456);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(12345.12345);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(123456.12345);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(1234567.12345);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(12345678.123);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(12345678.1234);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(12345678.12345);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(12345678.123456);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(12345678.1234567);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(12345678.12345678);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(12345678.1234567891);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(12345678.12345678912);

1 rows affected.

SQL> insert into test_temp_t1(f1) values(12345678.0123456789);

1 rows affected.

SQL> select to_char(f1) from test_temp_t1;

TO_CHAR(F1)                                                     
----------------------------------------------------------------
12345678.01235                                                  
1.111                                                           
1.12345                                                         
1.12346                                                         
12345.12345                                                     
123456.12345                                                    
1234567.12345                                                   
12345678.123                                                    
12345678.1234                                                   
12345678.12345                                                  
12345678.12346                                                  
12345678.12346                                                  
12345678.12346                                                  
12345678.12346                                                  
12345678.12346                                                  
12345678.01235                                                  

16 rows fetched.

SQL> drop table test_temp_t1;

Succeed.

SQL> 
SQL> --test in ct_decimal.sql  number/number same as decimal
SQL> drop table if exists test_temp_t1;

Succeed.

SQL> create table test_temp_t1(f1 decimal(38,20), f2 numeric, f3 decimal);

Succeed.

SQL> insert into test_temp_t1(f1, f2, f3) values(12345678.0123456789, 12345678.0123456789, 12345678.0123456789);

1 rows affected.

SQL> insert into test_temp_t1(f1, f2, f3) values(0.0123456789, 12345678.0123456789, 12345678.0123456789);

1 rows affected.

SQL> select to_char(f1), to_char(f2), to_char(f3) from test_temp_t1;

TO_CHAR(F1)                                                      TO_CHAR(F2)                                                      TO_CHAR(F3)                                                     
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
12345678.0123456789                                              12345678.0123456789                                              12345678.0123456789                                             
.0123456789                                                      12345678.0123456789                                              12345678.0123456789                                             

2 rows fetched.

SQL> drop table test_temp_t1;

Succeed.

SQL> 
SQL> --test char 
SQL> --varchar same as varchar2
SQL> drop table if exists test_temp_t1;

Succeed.

SQL> create table test_temp_t1(f1 char(8000));

Succeed.

SQL> drop table test_temp_t1;

Succeed.

SQL> create table test_temp_t1(f1 varchar(8000));

Succeed.

SQL> drop table test_temp_t1;

Succeed.

SQL> create table test_temp_t1(f1 char, f2 char(5), f3 varchar(10), f4 varchar(8000));

Succeed.

SQL> insert into test_temp_t1(f1, f2, f3, f4) values(null, null, null, null);

1 rows affected.

SQL> insert into test_temp_t1(f1, f2, f3, f4) values('a', '12345', '0123456789', '0123456789');

1 rows affected.

SQL> insert into test_temp_t1(f1, f2, f3, f4) values('ab', null, null, null);

CT-00698, The size(2) of value can't larger than defined size(1) of char
SQL> insert into test_temp_t1(f1, f2, f3, f4) values(1, null, null, null);

1 rows affected.

SQL> insert into test_temp_t1(f1, f2, f3, f4) values('1', '123456', null, null);

CT-00698, The size(6) of value can't larger than defined size(5) of char
SQL> insert into test_temp_t1(f1, f2, f3, f4) values('1', 12345, null, null);

1 rows affected.

SQL> select * from test_temp_t1;

F1 F2    F3         F4                                                              
-- ----- ---------- ----------------------------------------------------------------
                                                                                    
a  12345 0123456789 0123456789                                                      
1                                                                                   
1  12345                                                                            

4 rows fetched.

SQL> drop table test_temp_t1;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS T_CHAR_1;

Succeed.

SQL> CREATE TABLE T_CHAR_1 (F_CHAR CHAR(8), F_VARCHAR VARCHAR(8));

Succeed.

SQL> 
SQL> INSERT INTO T_CHAR_1 VALUES('AB'    , 'AB'    );

1 rows affected.

SQL> INSERT INTO T_CHAR_1 VALUES('AB '   , 'AB '   );

1 rows affected.

SQL> INSERT INTO T_CHAR_1 VALUES(' A B'   , 'A B'   );

1 rows affected.

SQL> INSERT INTO T_CHAR_1 VALUES(' A B '  , 'A B '  );

1 rows affected.

SQL> INSERT INTO T_CHAR_1 VALUES('ABCDEFGH'  , 'ABCDEFGH'  );

1 rows affected.

SQL> UPDATE T_CHAR_1 SET F_CHAR = 'AB',F_VARCHAR = 'AB' WHERE F_CHAR = 'AB' AND F_VARCHAR = 'AB';

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> --EXPECT ERROR
SQL> SELECT F_CHAR||'W' FROM T_CHAR_1 GROUP BY F_CHAR||'W ';

CT-00609, [1:8]Expression not in group list
SQL> 
SQL> SELECT F_CHAR||'W' FROM T_CHAR_1 GROUP BY F_CHAR||'W' ORDER BY 1;

F_CHAR||'W'
-----------
 A B    W  
AB      W  
ABCDEFGHW  

3 rows fetched.

SQL> SELECT LENGTH(F_CHAR),LENGTH(F_VARCHAR) FROM T_CHAR_1 ORDER BY 1,2;

LENGTH(F_CHAR)       LENGTH(F_VARCHAR)   
-------------------- --------------------
8                    2                   
8                    3                   
8                    3                   
8                    4                   
8                    8                   

5 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = 'AB';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       
AB       AB       

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR > 'AB';

F_CHAR   F_VARCHAR
-------- ---------
ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR like 'A_';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = SUBSTR('ABC',0,2);

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = ' AB';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = 'AB ';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       
AB       AB       

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = 'AB  ';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       
AB       AB       

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = ' A B';

F_CHAR   F_VARCHAR
-------- ---------
 A B     A B      
 A B     A B      

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = ' A B ';

F_CHAR   F_VARCHAR
-------- ---------
 A B     A B      
 A B     A B      

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = ' A B  ';

F_CHAR   F_VARCHAR
-------- ---------
 A B     A B      
 A B     A B      

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = 'ABCDEFGH';

F_CHAR   F_VARCHAR
-------- ---------
ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------
ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR > 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR < 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       
AB       AB       
 A B     A B      
 A B     A B      

4 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = ' ABCDEFGH';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = 'AB';

F_CHAR  
--------
AB      

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR like 'A_';

F_CHAR  
--------

0 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = SUBSTR('ABC',0,2);

F_CHAR  
--------

0 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = ' AB';

F_CHAR  
--------

0 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = 'AB ';

F_CHAR  
--------
AB      

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = 'AB  ';

F_CHAR  
--------
AB      

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = ' A B';

F_CHAR  
--------
 A B    

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = ' A B ';

F_CHAR  
--------
 A B    

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = ' A B  ';

F_CHAR  
--------
 A B    

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = 'ABCDEFGH';

F_CHAR  
--------
ABCDEFGH

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = 'ABCDEFGH ';

F_CHAR  
--------
ABCDEFGH

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = ' ABCDEFGH';

F_CHAR  
--------

0 rows fetched.

SQL> 
SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = 'AB';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR > 'AB';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       
ABCDEFGH ABCDEFGH 

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR like 'A_';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = SUBSTR('ABC',0,2);

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = ' AB';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = 'AB ';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = 'AB  ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = ' A B';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = ' A B ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = ' A B  ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = 'ABCDEFGH';

F_CHAR   F_VARCHAR
-------- ---------
ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR > 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR < 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       
AB       AB       
 A B     A B      
 A B     A B      
ABCDEFGH ABCDEFGH 

5 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = ' ABCDEFGH';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR <<> 'ABCDEFGH; ';

CT-00601, [1:40]Sql syntax error: expression error
SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = 'AB';

F_VARCHAR
---------
AB       

1 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR like 'A_';

F_VARCHAR
---------
AB       

1 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = SUBSTR('ABC',0,2);

F_VARCHAR
---------
AB       

1 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = ' AB';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = 'AB ';

F_VARCHAR
---------
AB       

1 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = 'AB  ';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = ' A B';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = ' A B ';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = ' A B  ';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = 'ABCDEFGH';

F_VARCHAR
---------
ABCDEFGH 

1 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = 'ABCDEFGH ';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = ' ABCDEFGH';

F_VARCHAR
---------

0 rows fetched.

SQL> 
SQL> SELECT * FROM T_CHAR_1 T1,T_CHAR_1 T2 WHERE T1.F_CHAR = T2.F_CHAR ORDER BY T1.F_CHAR,T1.F_VARCHAR;

F_CHAR   F_VARCHAR F_CHAR   F_VARCHAR
-------- --------- -------- ---------
 A B     A B        A B     A B      
 A B     A B        A B     A B      
 A B     A B        A B     A B      
 A B     A B        A B     A B      
AB       AB        AB       AB       
AB       AB        AB       AB       
AB       AB        AB       AB       
AB       AB        AB       AB       
ABCDEFGH ABCDEFGH  ABCDEFGH ABCDEFGH 

9 rows fetched.

SQL> SELECT * FROM T_CHAR_1 T1,T_CHAR_1 T2 WHERE T1.F_VARCHAR = T2.F_VARCHAR ORDER BY T1.F_CHAR,T1.F_VARCHAR;

F_CHAR   F_VARCHAR F_CHAR   F_VARCHAR
-------- --------- -------- ---------
 A B     A B        A B     A B      
 A B     A B        A B     A B      
AB       AB        AB       AB       
AB       AB        AB       AB       
ABCDEFGH ABCDEFGH  ABCDEFGH ABCDEFGH 

5 rows fetched.

SQL> SELECT * FROM T_CHAR_1 T1,T_CHAR_1 T2 WHERE T1.F_CHAR = T2.F_VARCHAR ORDER BY T1.F_CHAR,T1.F_VARCHAR;

F_CHAR   F_VARCHAR F_CHAR   F_VARCHAR
-------- --------- -------- ---------
ABCDEFGH ABCDEFGH  ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 T1,T_CHAR_1 T2 WHERE T1.F_VARCHAR = T2.F_CHAR ORDER BY T1.F_CHAR,T1.F_VARCHAR;

F_CHAR   F_VARCHAR F_CHAR   F_VARCHAR
-------- --------- -------- ---------
ABCDEFGH ABCDEFGH  ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> 
SQL> 
SQL> --TEST INDEX SELECT
SQL> CREATE INDEX INDEX_1_T_CHAR_1 ON T_CHAR_1(F_CHAR);

Succeed.

SQL> CREATE INDEX INDEX_2_T_CHAR_1 ON T_CHAR_1(F_VARCHAR);

Succeed.

SQL> 
SQL> UPDATE T_CHAR_1 SET F_CHAR = 'AB',F_VARCHAR = 'AB' WHERE F_CHAR = 'AB' AND F_VARCHAR = 'AB';

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> SELECT LENGTH(F_CHAR),LENGTH(F_VARCHAR) FROM T_CHAR_1 ORDER BY 1,2;

LENGTH(F_CHAR)       LENGTH(F_VARCHAR)   
-------------------- --------------------
8                    2                   
8                    3                   
8                    3                   
8                    4                   
8                    8                   

5 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = 'AB';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       
AB       AB       

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR > 'AB';

F_CHAR   F_VARCHAR
-------- ---------
ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR like 'A_';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = SUBSTR('ABC',0,2);

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = ' AB';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = 'AB ';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       
AB       AB       

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = 'AB  ';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       
AB       AB       

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = ' A B';

F_CHAR   F_VARCHAR
-------- ---------
 A B     A B      
 A B     A B      

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = ' A B ';

F_CHAR   F_VARCHAR
-------- ---------
 A B     A B      
 A B     A B      

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = ' A B  ';

F_CHAR   F_VARCHAR
-------- ---------
 A B     A B      
 A B     A B      

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = 'ABCDEFGH';

F_CHAR   F_VARCHAR
-------- ---------
ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------
ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR > 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR < 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------
 A B     A B      
 A B     A B      
AB       AB       
AB       AB       

4 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_CHAR = ' ABCDEFGH';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = 'AB';

F_CHAR  
--------
AB      

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR like 'A_';

F_CHAR  
--------

0 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = SUBSTR('ABC',0,2);

F_CHAR  
--------

0 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = ' AB';

F_CHAR  
--------

0 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = 'AB ';

F_CHAR  
--------
AB      

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = 'AB  ';

F_CHAR  
--------
AB      

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = ' A B';

F_CHAR  
--------
 A B    

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = ' A B ';

F_CHAR  
--------
 A B    

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = ' A B  ';

F_CHAR  
--------
 A B    

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = 'ABCDEFGH';

F_CHAR  
--------
ABCDEFGH

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = 'ABCDEFGH ';

F_CHAR  
--------
ABCDEFGH

1 rows fetched.

SQL> SELECT F_CHAR FROM T_CHAR_1 GROUP BY F_CHAR HAVING F_CHAR = ' ABCDEFGH';

F_CHAR  
--------

0 rows fetched.

SQL> 
SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = 'AB';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR > 'AB';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       
ABCDEFGH ABCDEFGH 

2 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR like 'A_';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = SUBSTR('ABC',0,2);

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = ' AB';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = 'AB ';

F_CHAR   F_VARCHAR
-------- ---------
AB       AB       

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = 'AB  ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = ' A B';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = ' A B ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = ' A B  ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = 'ABCDEFGH';

F_CHAR   F_VARCHAR
-------- ---------
ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR > 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR < 'ABCDEFGH ';

F_CHAR   F_VARCHAR
-------- ---------
 A B     A B      
 A B     A B      
AB       AB       
AB       AB       
ABCDEFGH ABCDEFGH 

5 rows fetched.

SQL> SELECT * FROM T_CHAR_1 WHERE F_VARCHAR = ' ABCDEFGH';

F_CHAR   F_VARCHAR
-------- ---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = 'AB';

F_VARCHAR
---------
AB       

1 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR like 'A_';

F_VARCHAR
---------
AB       

1 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = SUBSTR('ABC',0,2);

F_VARCHAR
---------
AB       

1 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = ' AB';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = 'AB ';

F_VARCHAR
---------
AB       

1 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = 'AB  ';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = ' A B';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = ' A B ';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = ' A B  ';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = 'ABCDEFGH';

F_VARCHAR
---------
ABCDEFGH 

1 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = 'ABCDEFGH ';

F_VARCHAR
---------

0 rows fetched.

SQL> SELECT F_VARCHAR FROM T_CHAR_1 GROUP BY F_VARCHAR HAVING F_VARCHAR = ' ABCDEFGH';

F_VARCHAR
---------

0 rows fetched.

SQL> 
SQL> SELECT * FROM T_CHAR_1 T1,T_CHAR_1 T2 WHERE T1.F_CHAR = T2.F_CHAR ORDER BY T1.F_CHAR,T1.F_VARCHAR;

F_CHAR   F_VARCHAR F_CHAR   F_VARCHAR
-------- --------- -------- ---------
 A B     A B        A B     A B      
 A B     A B        A B     A B      
 A B     A B        A B     A B      
 A B     A B        A B     A B      
AB       AB        AB       AB       
AB       AB        AB       AB       
AB       AB        AB       AB       
AB       AB        AB       AB       
ABCDEFGH ABCDEFGH  ABCDEFGH ABCDEFGH 

9 rows fetched.

SQL> SELECT * FROM T_CHAR_1 T1,T_CHAR_1 T2 WHERE T1.F_VARCHAR = T2.F_VARCHAR ORDER BY T1.F_CHAR,T1.F_VARCHAR;

F_CHAR   F_VARCHAR F_CHAR   F_VARCHAR
-------- --------- -------- ---------
 A B     A B        A B     A B      
 A B     A B        A B     A B      
AB       AB        AB       AB       
AB       AB        AB       AB       
ABCDEFGH ABCDEFGH  ABCDEFGH ABCDEFGH 

5 rows fetched.

SQL> SELECT * FROM T_CHAR_1 T1,T_CHAR_1 T2 WHERE T1.F_CHAR = T2.F_VARCHAR ORDER BY T1.F_CHAR,T1.F_VARCHAR;

F_CHAR   F_VARCHAR F_CHAR   F_VARCHAR
-------- --------- -------- ---------
ABCDEFGH ABCDEFGH  ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> SELECT * FROM T_CHAR_1 T1,T_CHAR_1 T2 WHERE T1.F_VARCHAR = T2.F_CHAR ORDER BY T1.F_CHAR,T1.F_VARCHAR;

F_CHAR   F_VARCHAR F_CHAR   F_VARCHAR
-------- --------- -------- ---------
ABCDEFGH ABCDEFGH  ABCDEFGH ABCDEFGH 

1 rows fetched.

SQL> 
SQL> 
SQL> --lob
SQL> drop table if exists test_temp_t1;

Succeed.

SQL> create table test_temp_t1(f1 clob, f2 blob, f3 binary(1), f4 raw(1), f5 varbinary(1));

Succeed.

SQL> select * from test_temp_t1;

F1                                                               F2                                                               F3                                                               F4                                                               F5                                                              
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> insert into test_temp_t1 values(null, null, null, null, null);

1 rows affected.

SQL> select * from test_temp_t1;

F1                                                               F2                                                               F3                                                               F4                                                               F5                                                              
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
                                                                                                                                                                                                                                                                                                                                    

1 rows fetched.

SQL> drop table test_temp_t1;

Succeed.

SQL> 
SQL> drop table if exists test_temp_t1;

Succeed.

SQL> create table test_temp_t1(f1 bool, f2 bool, f3 bool);

Succeed.

SQL> select * from test_temp_t1;

F1     F2     F3    
------ ------ ------

0 rows fetched.

SQL> insert into test_temp_t1 values(true, TRUE, NULL);

1 rows affected.

SQL> insert into test_temp_t1 values(FALSE, false, null);

1 rows affected.

SQL> select * from test_temp_t1;

F1     F2     F3    
------ ------ ------
TRUE   TRUE         
FALSE  FALSE        

2 rows fetched.

SQL> select * from test_temp_t1 where f1=true;

F1     F2     F3    
------ ------ ------
TRUE   TRUE         

1 rows fetched.

SQL> select * from test_temp_t1 where f1=FALSE;

F1     F2     F3    
------ ------ ------
FALSE  FALSE        

1 rows fetched.

SQL> UPDATE test_temp_t1 SET f2=true where f1=FALSE;

1 rows affected.

SQL> select * from test_temp_t1;

F1     F2     F3    
------ ------ ------
TRUE   TRUE         
FALSE  TRUE         

2 rows fetched.

SQL> drop table test_temp_t1;

Succeed.

SQL> 
SQL> 
SQL> -- DTS2018020802930
SQL> drop table if exists fmytest;

Succeed.

SQL> create table fmytest (a blob);

Succeed.

SQL> insert into  fmytest values('1');

1 rows affected.

SQL> insert into fmytest values('01');

1 rows affected.

SQL> insert into fmytest values('0x');

CT-00105, Invalid format of hex
SQL> insert into fmytest values('0x0');

1 rows affected.

SQL> insert into fmytest values('123');

1 rows affected.

SQL> insert into fmytest values('12345');

1 rows affected.

SQL> insert into fmytest values('09898781');

1 rows affected.

SQL> insert into fmytest values('0x02');

1 rows affected.

SQL> insert into fmytest values('0x023');

1 rows affected.

SQL> insert into fmytest values('1234354587643123455213445656723123424554566776763221132454566768767433242323445453565654542323');

1 rows affected.

SQL> insert into fmytest values('0x02B');

1 rows affected.

SQL> insert into fmytest values('0x02K');

CT-00105, Invalid format of hex
SQL> insert into fmytest values('0xK2');

CT-00105, Invalid format of hex
SQL> insert into fmytest values('\x2');

1 rows affected.

SQL> insert into fmytest values('\X2D');

1 rows affected.

SQL> select * from fmytest;

A                                                               
----------------------------------------------------------------
01                                                              
01                                                              
00                                                              
0123                                                            
012345                                                          
09898781                                                        
02                                                              
0023                                                            
1234354587643123455213445656723123424554566776763221132454566768767433242323445453565654542323
002B                                                            
02                                                              
2D                                                              

12 rows fetched.

SQL> 
SQL> drop table if exists fmytest2;

Succeed.

SQL> create table fmytest2 (a raw(30));

Succeed.

SQL> insert into fmytest2 values('1');

1 rows affected.

SQL> insert into fmytest2 values('01');

1 rows affected.

SQL> insert into fmytest2 values('0x');

CT-00105, Invalid format of hex
SQL> insert into fmytest2 values('0x0');

1 rows affected.

SQL> insert into fmytest2 values('123');

1 rows affected.

SQL> insert into fmytest2 values('12345');

1 rows affected.

SQL> insert into fmytest2 values('09898781');

1 rows affected.

SQL> insert into fmytest2 values('0x02');

1 rows affected.

SQL> insert into fmytest2 values('0x023');

1 rows affected.

SQL> insert into fmytest2 values('1234354587643123455213445656723123424554566776763221132454566768767433242323445453565654542323');

CT-01346, The column "A" length exceeded the maximum, (actual: 47, maximum: 30).
SQL> insert into fmytest2 values('0x02B');

1 rows affected.

SQL> insert into fmytest2 values('0x02K');

CT-00105, Invalid format of hex
SQL> insert into fmytest2 values('0xK2');

CT-00105, Invalid format of hex
SQL> insert into fmytest2 values('0xR');

CT-00105, Invalid format of hex
SQL> insert into fmytest2 values('0xX1234');

CT-00105, Invalid format of hex
SQL> select * from fmytest2 order by a;

A                                                               
----------------------------------------------------------------
00                                                              
0023                                                            
002B                                                            
01                                                              
01                                                              
0123                                                            
012345                                                          
02                                                              
09898781                                                        

9 rows fetched.

SQL> 
SQL> -- BOOLEAN DATATYPE
SQL> -- DTS2018020602819; DTS2018020505342
SQL> DROP TABLE IF EXISTS RQG_ALL_TYPE_TABLE_GSQL;

Succeed.

SQL> --CREATE TABLE RQG_ALL_TYPE_TABLE_GSQL( ID BIGINT, C_INTEGER INTEGER NULL , C_BIGINT BIGINT DEFAULT '10', C_NUMBER NUMBER NULL , C_DOUBLE DOUBLE PRECISION NULL , C_CHAR20 CHAR(20) NOT NULL , C_CHAR4000 CHAR(100) DEFAULT '10', C_VARCHAR20 VARCHAR(20) NULL DEFAULT '10', C_VARCHAR4000 VARCHAR(100) DEFAULT NULL, C_TEXT TEXT NULL DEFAULT NULL, C_BOOL BOOL NOT NULL DEFAULT 10, C_TIMESTAMP3 TIMESTAMP(3) NOT NULL DEFAULT '2000-01-01 12:59:59.999', C_TIMESTAMP6 TIMESTAMP(6) NULL ) DISTRIBUTE BY HASH ( C_BIGINT ) PARTITION BY RANGE ( C_VARCHAR20 ) ( PARTITION PT01 VALUES LESS THAN ( 'A' ),PARTITION PT02 VALUES LESS THAN ( 'P' ),PARTITION PT03 VALUES LESS THAN ( MAXVALUE ) );
SQL> CREATE TABLE RQG_ALL_TYPE_TABLE_GSQL( ID BIGINT, C_INTEGER INTEGER NULL , C_BIGINT BIGINT DEFAULT '10', C_NUMBER NUMBER NULL , C_DOUBLE DOUBLE PRECISION NULL , C_CHAR20 CHAR(20) NOT NULL , C_CHAR4000 CHAR(100) DEFAULT '10', C_VARCHAR20 VARCHAR(20) NULL DEFAULT '10', C_VARCHAR4000 VARCHAR(100) DEFAULT NULL, C_TEXT TEXT NULL DEFAULT NULL, C_BOOL BOOL NOT NULL DEFAULT 10, C_TIMESTAMP3 TIMESTAMP(3) NOT NULL DEFAULT '2000-01-01 12:59:59.999', C_TIMESTAMP6 TIMESTAMP(6) NULL ) PARTITION BY RANGE ( C_VARCHAR20 ) ( PARTITION PT01 VALUES LESS THAN ( 'A' ),PARTITION PT02 VALUES LESS THAN ( 'P' ),PARTITION PT03 VALUES LESS THAN ( MAXVALUE ) );

Succeed.

SQL> CREATE UNIQUE INDEX IDX ON RQG_ALL_TYPE_TABLE_GSQL ( C_VARCHAR20,C_BIGINT,c_timestamp3,c_char20,c_integer )   ;

Succeed.

SQL> INSERT INTO RQG_ALL_TYPE_TABLE_GSQL VALUES(0,1,1,1.234,1.12345,'cantiandbachar20','welcome tochinabchar4000','cantiandbavchar20','welcometochinabvchar4000','cantiandbtext',100,'2000-01-01 12:59:59.999','2000-01-01 12:59:59.999999');

1 rows affected.

SQL> INSERT INTO RQG_ALL_TYPE_TABLE_GSQL VALUES(1,2,2,2.234,2.12345,'cantiandbachar202','welcometochinabchar40002','cantiandbvchar202','welcometochinavchar40002','cantiandbtext2',FALSE,'2002-01-01 12:59:59.999','2002-01-01 12:59:59.999999');

1 rows affected.

SQL> INSERT INTO RQG_ALL_TYPE_TABLE_GSQL VALUES(2,-1500,-1500,-1500.234,-1500.12345,'aaussdbachar20','aelcometochinabchar4000','aaussdb vachar20','aelcometochinavarchar4000','aaussdbtext',TRUE,'2200-01-01 12:59:59.999','2200-01-01 12:59:59.999999');

1 rows affected.

SQL> INSERT INTO RQG_ALL_TYPE_TABLE_GSQL VALUES(3,1500,1500,1500.234,1500.12345,'baussdbachar20','belcometochinabchar4000','baussdbvachar20','belcometochinavarchar4000','baussdbtext',-10,'2300-01-01 12:59:59.999','2300-01-01 12:59:59.999999');

1 rows affected.

SQL> INSERT INTO RQG_ALL_TYPE_TABLE_GSQL VALUES(4,NULL,NULL,NULL,NULL,'char20',NULL,NULL,NULL,NULL,10,'2300-01-01 12:59:59.999',NULL) ;

1 rows affected.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL  order by ID;

C_BOOL
------
TRUE  
FALSE 
TRUE  
TRUE  
TRUE  

5 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL > TRUE order by ID;

C_BOOL
------

0 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = TRUE  order by ID;

C_BOOL
------
TRUE  
TRUE  
TRUE  
TRUE  

4 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = 'TRUE'  order by ID;

C_BOOL
------
TRUE  
TRUE  
TRUE  
TRUE  

4 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = 'falsE' order by ID;

C_BOOL
------
FALSE 

1 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = 'false' order by ID;

C_BOOL
------
FALSE 

1 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = 'TRUE  ' order by ID;

C_BOOL
------
TRUE  
TRUE  
TRUE  
TRUE  

4 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = 'TRUE  1' order by ID;

CT-00601, Sql syntax error: invalid BOOLEAN text
SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL < 'TRUE' order by ID;

C_BOOL
------
FALSE 

1 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = 'TRUE  1' order by ID;

CT-00601, Sql syntax error: invalid BOOLEAN text
SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE 'TRUE' < c_bool order by ID;

C_BOOL
------

0 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE 'false' < c_bool order by ID;

C_BOOL
------
TRUE  
TRUE  
TRUE  
TRUE  

4 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE 'false 01' < c_bool order by ID;

CT-00601, Sql syntax error: invalid BOOLEAN text
SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE '01' < c_bool order by ID;

CT-00601, Sql syntax error: invalid BOOLEAN text
SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE '1' < c_bool order by ID;

C_BOOL
------

0 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE '0' > c_bool order by ID;

C_BOOL
------

0 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE -1 > c_bool order by ID;

C_BOOL
------

0 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE -1 < c_bool order by ID;

C_BOOL
------
TRUE  
FALSE 
TRUE  
TRUE  
TRUE  

5 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE -1::bool > c_bool order by ID;

C_BOOL
------
FALSE 

1 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE -1::bool < c_bool order by ID;

C_BOOL
------

0 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE c_bool IN (TRUE, FALSE) order by ID;

C_BOOL
------
TRUE  
FALSE 
TRUE  
TRUE  
TRUE  

5 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE c_bool between FALSE and TRUE order by ID;

C_BOOL
------
TRUE  
FALSE 
TRUE  
TRUE  
TRUE  

5 rows fetched.

SQL> 
SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = '1' order by ID;

C_BOOL
------
TRUE  
TRUE  
TRUE  
TRUE  

4 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = 1 order by ID;

C_BOOL
------
TRUE  
TRUE  
TRUE  
TRUE  

4 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = 0 order by ID;

C_BOOL
------
FALSE 

1 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = '0' order by ID;

C_BOOL
------
FALSE 

1 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = 100 order by ID;

C_BOOL
------

0 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = -100 order by ID;

C_BOOL
------

0 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = -1.001 order by ID;

CT-00606, [1:59]Inconsistent datatypes, expected BOOLEAN - got NUMBER
SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = 100.3232323232::decimal::double::int order by ID;

C_BOOL
------

0 rows fetched.

SQL> SELECT C_BOOL FROM RQG_ALL_TYPE_TABLE_GSQL WHERE C_BOOL = 0::bigint order by ID;

C_BOOL
------
FALSE 

1 rows fetched.

SQL> 
SQL> DROP TABLE IF EXISTS RQG_BOOL_TYPE_GSQL;

Succeed.

SQL> CREATE TABLE RQG_BOOL_TYPE_GSQL( ID BIGINT, C_INTEGER INTEGER NULL , C_BOOL boolean default 'False');

Succeed.

SQL> insert into RQG_BOOL_TYPE_GSQL values(0, 1, default);

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(1, 1, null);

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(2, null, true);

1 rows affected.

SQL> select * from RQG_BOOL_TYPE_GSQL order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
0                    1            FALSE 
1                    1                  
2                                 TRUE  

3 rows fetched.

SQL> 
SQL> -- boolean and integer 
SQL> insert into RQG_BOOL_TYPE_GSQL values(3, 2, 1.00);

CT-00606, [1:45]Inconsistent datatypes, expected BOOLEAN - got NUMBER
SQL> insert into RQG_BOOL_TYPE_GSQL values(3, 2, 100);

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(4, 2, -100);

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(5, 2, 0);

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(6, 2, -0);

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(7, 2, 0.0);

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(8, 2, 0.1);

CT-00606, [1:45]Inconsistent datatypes, expected BOOLEAN - got NUMBER
SQL> insert into RQG_BOOL_TYPE_GSQL values(9, 2, 0.0E100);

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(10, 2, 1.0012311E2::double);

CT-00606, [1:57]Inconsistent datatypes, expected BOOLEAN - got BINARY_DOUBLE
SQL> insert into RQG_BOOL_TYPE_GSQL values(10, 2, 1.0012311E2::decimal);

CT-00606, [1:57]Inconsistent datatypes, expected BOOLEAN - got NUMBER
SQL> insert into RQG_BOOL_TYPE_GSQL values(11, 2, 1.0012311E2::double::int);

1 rows affected.

SQL> select * from RQG_BOOL_TYPE_GSQL where C_INTEGER = 2 order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
3                    2            TRUE  
4                    2            TRUE  
5                    2            FALSE 
6                    2            FALSE 
7                    2            FALSE 
9                    2            FALSE 
11                   2            TRUE  

7 rows fetched.

SQL> select id, cast(c_bool as integer), 1 - cast(c_bool as bigint) from RQG_BOOL_TYPE_GSQL where C_INTEGER = 2 order by id;

ID                   CAST(C_BOOL AS INTEGER) 1 - CAST(C_BOOL AS BIGINT)
-------------------- ----------------------- --------------------------
3                    1                       0                         
4                    1                       0                         
5                    0                       1                         
6                    0                       1                         
7                    0                       1                         
9                    0                       1                         
11                   1                       0                         

7 rows fetched.

SQL> select id, cast(c_bool as double) from RQG_BOOL_TYPE_GSQL where C_INTEGER = 2 order by id;

CT-00606, [1:17]Inconsistent datatypes, expected BINARY_DOUBLE - got BOOLEAN
SQL> select id, c_bool::int::double/2 from RQG_BOOL_TYPE_GSQL where C_INTEGER = 2 order by id;

ID                   C_BOOL::INT::DOUBLE/2
-------------------- ---------------------
3                    0.5                  
4                    0.5                  
5                    0                    
6                    0                    
7                    0                    
9                    0                    
11                   0.5                  

7 rows fetched.

SQL> 
SQL> -- reserved words
SQL> insert into RQG_BOOL_TYPE_GSQL values(12, 3, TRUE);

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(13, 3, TrUE);

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(14, 3, FALSE);

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(15, 3, FALsE);

1 rows affected.

SQL> select * from RQG_BOOL_TYPE_GSQL where C_INTEGER = 3 order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
12                   3            TRUE  
13                   3            TRUE  
14                   3            FALSE 
15                   3            FALSE 

4 rows fetched.

SQL> 
SQL> --- boolean and string
SQL> insert into RQG_BOOL_TYPE_GSQL values(20, 4, '0');

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(21, 4, '1');

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(22, 4, 'true');

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(23, 4, 'tRUE');

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(24, 4, 'false');

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(25, 4, 'T');

1 rows affected.

SQL> insert into RQG_BOOL_TYPE_GSQL values(26, 4, 'F');

1 rows affected.

SQL> -- invalid input
SQL> insert into RQG_BOOL_TYPE_GSQL values(27, 4, '100');

CT-00601, Sql syntax error: invalid BOOLEAN text
SQL> insert into RQG_BOOL_TYPE_GSQL values(28, 4, '-10');

CT-00601, Sql syntax error: invalid BOOLEAN text
SQL> insert into RQG_BOOL_TYPE_GSQL values(29, 4, '00');

CT-00601, Sql syntax error: invalid BOOLEAN text
SQL> insert into RQG_BOOL_TYPE_GSQL values(30, 4, 'xasfd');

CT-00601, Sql syntax error: invalid BOOLEAN text
SQL> insert into RQG_BOOL_TYPE_GSQL values(31, 4, 'Tr');

CT-00601, Sql syntax error: invalid BOOLEAN text
SQL> insert into RQG_BOOL_TYPE_GSQL values(32, 4, 'Fa');

CT-00601, Sql syntax error: invalid BOOLEAN text
SQL> insert into RQG_BOOL_TYPE_GSQL values(33, 4, 'f'::binary(10));

CT-00606, [1:49]Inconsistent datatypes, expected BOOLEAN - got BINARY
SQL> select * from RQG_BOOL_TYPE_GSQL where C_INTEGER = 4 order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
20                   4            FALSE 
21                   4            TRUE  
22                   4            TRUE  
23                   4            TRUE  
24                   4            FALSE 
25                   4            TRUE  
26                   4            FALSE 

7 rows fetched.

SQL> select id, cast(c_bool as char(3)) from RQG_BOOL_TYPE_GSQL where C_INTEGER = 4 order by id;

ID                   CAST(C_BOOL AS CHAR(3))
-------------------- -----------------------
20                   FAL                    
21                   TRU                    
22                   TRU                    
23                   TRU                    
24                   FAL                    
25                   TRU                    
26                   FAL                    

7 rows fetched.

SQL> select id, cast(c_bool as char(5)) from RQG_BOOL_TYPE_GSQL where C_INTEGER = 4 order by id;

ID                   CAST(C_BOOL AS CHAR(5))
-------------------- -----------------------
20                   FALSE                  
21                   TRUE                   
22                   TRUE                   
23                   TRUE                   
24                   FALSE                  
25                   TRUE                   
26                   FALSE                  

7 rows fetched.

SQL> select id, c_bool::integer||c_bool::varchar(10) from RQG_BOOL_TYPE_GSQL where C_INTEGER = 4 order by id;

ID                   C_BOOL::INTEGER||C_BOOL::VARCHAR(10)
-------------------- ------------------------------------
20                   0FALSE                              
21                   1TRUE                               
22                   1TRUE                               
23                   1TRUE                               
24                   0FALSE                              
25                   1TRUE                               
26                   0FALSE                              

7 rows fetched.

SQL> select id, c_bool::binary(20) from RQG_BOOL_TYPE_GSQL where C_INTEGER = 4 order by id;

ID                   C_BOOL::BINARY(20)                                              
-------------------- ----------------------------------------------------------------
20                   FALSE                                                           
21                   TRUE                                                            
22                   TRUE                                                            
23                   TRUE                                                            
24                   FALSE                                                           
25                   TRUE                                                            
26                   FALSE                                                           

7 rows fetched.

SQL> 
SQL> select * from RQG_BOOL_TYPE_GSQL order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
0                    1            FALSE 
1                    1                  
2                                 TRUE  
3                    2            TRUE  
4                    2            TRUE  
5                    2            FALSE 
6                    2            FALSE 
7                    2            FALSE 
9                    2            FALSE 
11                   2            TRUE  
12                   3            TRUE  
13                   3            TRUE  
14                   3            FALSE 
15                   3            FALSE 
20                   4            FALSE 
21                   4            TRUE  
22                   4            TRUE  
23                   4            TRUE  
24                   4            FALSE 
25                   4            TRUE  
26                   4            FALSE 

21 rows fetched.

SQL> -- boolean column as a condition
SQL> select * from RQG_BOOL_TYPE_GSQL where C_BOOL order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
2                                 TRUE  
3                    2            TRUE  
4                    2            TRUE  
11                   2            TRUE  
12                   3            TRUE  
13                   3            TRUE  
21                   4            TRUE  
22                   4            TRUE  
23                   4            TRUE  
25                   4            TRUE  

10 rows fetched.

SQL> 
SQL> -- in and between
SQL> select * from RQG_BOOL_TYPE_GSQL where c_bool between 'F' and true and C_INTEGER = 4 order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
20                   4            FALSE 
21                   4            TRUE  
22                   4            TRUE  
23                   4            TRUE  
24                   4            FALSE 
25                   4            TRUE  
26                   4            FALSE 

7 rows fetched.

SQL> select * from RQG_BOOL_TYPE_GSQL where c_bool between 'F' and 'FALSE' and C_INTEGER = 4 order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
20                   4            FALSE 
24                   4            FALSE 
26                   4            FALSE 

3 rows fetched.

SQL> select * from RQG_BOOL_TYPE_GSQL where c_bool between 200 and -100 and C_INTEGER = 4 order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------

0 rows fetched.

SQL> select * from RQG_BOOL_TYPE_GSQL where c_bool not in(TRUE, 100) and C_INTEGER = 4 order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
20                   4            FALSE 
24                   4            FALSE 
26                   4            FALSE 

3 rows fetched.

SQL> select * from RQG_BOOL_TYPE_GSQL where c_bool not in(TRUE, '1') and C_INTEGER = 4 order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
20                   4            FALSE 
24                   4            FALSE 
26                   4            FALSE 

3 rows fetched.

SQL> select * from RQG_BOOL_TYPE_GSQL where c_bool in(TRUE, 1, 'F') and C_INTEGER = 4 order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
20                   4            FALSE 
21                   4            TRUE  
22                   4            TRUE  
23                   4            TRUE  
24                   4            FALSE 
25                   4            TRUE  
26                   4            FALSE 

7 rows fetched.

SQL> select * from RQG_BOOL_TYPE_GSQL where c_bool between 'F' and 'FALSE' and C_INTEGER = 4 order by id;

ID                   C_INTEGER    C_BOOL
-------------------- ------------ ------
20                   4            FALSE 
24                   4            FALSE 
26                   4            FALSE 

3 rows fetched.

SQL> select * from RQG_BOOL_TYPE_GSQL where c_bool not in(TRUE, '1', 'xxxx');

CT-00601, Sql syntax error: invalid BOOLEAN text
SQL> 
SQL> --- boolean and aggr.sum
SQL> select sum(c_bool::int) from RQG_BOOL_TYPE_GSQL;

SUM(C_BOOL::INT)    
--------------------
10                  

1 rows fetched.

SQL> select sum(c_bool) from RQG_BOOL_TYPE_GSQL;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got BOOLEAN
SQL> 
SQL> DROP TABLE IF EXISTS test;

Succeed.

SQL> Create table test(c_int int);

Succeed.

SQL> Insert into test values(699990016 / (6 + 1));

1 rows affected.

SQL> Select * from test;

C_INT       
------------
99998574    

1 rows fetched.

SQL> 
SQL> DROP TABLE IF EXISTS RQG_ALL_TYPE_TABLE_GSQL;

Succeed.

SQL> CREATE TABLE RQG_ALL_TYPE_TABLE_GSQL(C_ID INTEGER, C_INTEGER INTEGER, C_BIGINT BIGINT,  C_BOOL BOOL,C_CHAR1 CHAR(1), C_CHAR20 CHAR(20), C_CHAR4000 CHAR(4000),C_VARCHAR1 VARCHAR(1), C_VARCHAR20 VARCHAR(20), C_VARCHAR4000 VARCHAR(4000)) ;

Succeed.

SQL> INSERT INTO RQG_ALL_TYPE_TABLE_GSQL(C_ID,C_VARCHAR20) VALUES(3,'1');

1 rows affected.

SQL> INSERT INTO RQG_ALL_TYPE_TABLE_GSQL(C_BOOL) VALUES(-9223372036854775808);

CT-00606, [1:52]Inconsistent datatypes, expected BOOLEAN - got NUMBER
SQL> INSERT INTO RQG_ALL_TYPE_TABLE_GSQL(C_ID,C_VARCHAR20,C_BOOL) VALUES(3,'1',-9223372036854775808);

CT-00606, [1:75]Inconsistent datatypes, expected BOOLEAN - got NUMBER
SQL> select C_ID, C_BOOL from RQG_ALL_TYPE_TABLE_GSQL;

C_ID         C_BOOL
------------ ------
3                  

1 rows fetched.

SQL> 
SQL> select (10+NULL)::bool;

CT-00606, [1:11]Inconsistent datatypes, expected BOOLEAN - got NUMBER
SQL> select -2147483648;

-2147483648         
--------------------
-2147483648         

1 rows fetched.

SQL> 
SQL> select cast(123123123 as smallint) from dual;

CAST(123123123 AS SMALLINT)
---------------------------
123123123                  

1 rows fetched.

SQL> select cast(123123123 as tinyint) from dual;

CAST(123123123 AS TINYINT)
--------------------------
123123123                 

1 rows fetched.

SQL> select cast(123123123 as nvarchar(10)) from dual;

CAST(123123123 AS NVARCHAR(10))                       
------------------------------------------------------
123123123                                             

1 rows fetched.

SQL> select cast(123123123 as nvarchar2(10)) from dual;

CAST(123123123 AS NVARCHAR2(10))                      
------------------------------------------------------
123123123                                             

1 rows fetched.

SQL> 
SQL> DROP TABLE IF EXISTS tbl_mysql_type_test;

Succeed.

SQL> create table tbl_mysql_type_test(f1 longtext, f2 longblob, f3 mediumblob, f4 image, f5 int);

Succeed.

SQL> desc tbl_mysql_type_test;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           CLOB                                
F2                                           IMAGE                               
F3                                           IMAGE                               
F4                                           IMAGE                               
F5                                           BINARY_INTEGER                      

SQL> insert into tbl_mysql_type_test values('qwe', 1234, '123qweh', 4567, 1);

1 rows affected.

SQL> insert into tbl_mysql_type_test values('qwe1', 12234, 12678, 'aawweer', 2);

1 rows affected.

SQL> select * from tbl_mysql_type_test order by f5;

F1                                                               F2                                                               F3                                                               F4                                                               F5          
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------
qwe                                                              1234                                                             123qweh                                                          4567                                                             1           
qwe1                                                             12234                                                            12678                                                            aawweer                                                          2           

2 rows fetched.

SQL> 
SQL> DROP TABLE IF EXISTS tbl_mysql_type_test;

Succeed.

SQL> create table tbl_mysql_type_test(x nchar, y utinyint);

Succeed.

SQL> desc tbl_mysql_type_test;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
X                                            CHAR(1 CHAR)                        
Y                                            BINARY_UINT32                       

SQL> 
SQL> DROP TABLE IF EXISTS tbl_mysql_type_test;

Succeed.

SQL> create table tbl_mysql_type_test(x long);

Succeed.

SQL> desc tbl_mysql_type_test;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
X                                            CLOB                                

SQL> 
SQL> DROP TABLE IF EXISTS tbl_mysql_type_test;

Succeed.

SQL> create table tbl_mysql_type_test(x double(30, 12), y double precision(13, 6));

Succeed.

SQL> desc tbl_mysql_type_test;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
X                                            BINARY_DOUBLE                       
Y                                            BINARY_DOUBLE                       

SQL> 
SQL> -- error case
SQL> DROP TABLE IF EXISTS tbl_mysql_type_test;

Succeed.

SQL> create table tbl_mysql_type_test(x double(30.123, 12));

CT-00601, [1:43]Sql syntax error: precision must be an integer
SQL> create table tbl_mysql_type_test(x double(30, 12.11));

CT-00601, [1:43]Sql syntax error: scale must be an integer
SQL> 
SQL> -- Support "CAST(expr AS [SIGNED] INTEGER)"
SQL> select cast(1 as signed int);

CAST(1 AS SIGNED INT)
---------------------
1                    

1 rows fetched.

SQL> select cast(1 as signed integer);

CAST(1 AS SIGNED INTEGER)
-------------------------
1                        

1 rows fetched.

SQL> select cast(1 as signed smallint);

CAST(1 AS SIGNED SMALLINT)
--------------------------
1                         

1 rows fetched.

SQL> 
SQL> select cast(1 as int);

CAST(1 AS INT)
--------------
1             

1 rows fetched.

SQL> select cast(1 as integer);

CAST(1 AS INTEGER)
------------------
1                 

1 rows fetched.

SQL> 
SQL> select cast(1 as signed);

CT-00601, [1:18]Sql syntax error: missing datatype
SQL> select cast(1 as signed bigint);

CT-00601, Sql syntax error: type INTEGER expected
SQL> select cast(1 as signed number);

CT-00601, Sql syntax error: type INTEGER expected
SQL> 
SQL> drop table if exists test_raw;

Succeed.

SQL> create table test_raw (a raw(30));

Succeed.

SQL> create index idx_test_raw on test_raw(a);

Succeed.

SQL> insert into test_raw values('0x023');

1 rows affected.

SQL> insert into test_raw values('1234'::binary(10));

1 rows affected.

SQL> insert into test_raw values(hextoraw('0adef1234'));

1 rows affected.

SQL> select * from test_raw;

A                                                               
----------------------------------------------------------------
0023                                                            
31323334000000000000
00ADEF1234

3 rows fetched.

SQL> --select * from test_raw where a='0x023';
SQL> select * from test_raw where a='1234'::binary(10);

A                                                               
----------------------------------------------------------------
31323334000000000000                                            

1 rows fetched.

SQL> select * from test_raw where a=hextoraw('0adef1234');

A                                                               
----------------------------------------------------------------
00ADEF1234                                                      

1 rows fetched.

SQL> 
SQL> drop table if exists test_binary;

Succeed.

SQL> create table test_binary (a varbinary(30));

Succeed.

SQL> create index idx_test_binary on test_binary(a);

Succeed.

SQL> insert into test_binary values('0x023');

1 rows affected.

SQL> insert into test_binary values('1234'::binary(10));

1 rows affected.

SQL> insert into test_binary values(hextoraw('0adef1234'));

1 rows affected.

SQL> insert into test_binary values(rawtohex('abcd09812'));

1 rows affected.

SQL> select * from test_binary;

A                                                               
----------------------------------------------------------------
                                                                
0x023                                                           
1234                                                            
616263643039383132                                              

4 rows fetched.

SQL> select * from test_binary where a='0x023';

A                                                               
----------------------------------------------------------------
0x023                                                           

1 rows fetched.

SQL> select * from test_binary where a='1234'::binary(10);

A                                                               
----------------------------------------------------------------
1234                                                            

1 rows fetched.

SQL> select * from test_binary where a=hextoraw('0adef1234');

A                                                               
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select * from test_binary where a=rawtohex('abcd09812');

A                                                               
----------------------------------------------------------------
616263643039383132                                              

1 rows fetched.

SQL> 
SQL> select 9223372036854775807 - (-9223372036854775808) from dual;

9223372036854775807 - (-9223372036854775808)
--------------------------------------------
18446744073709551615                        

1 rows fetched.

SQL> select 1 - (-9223372036854775808) from dual;

1 - (-9223372036854775808)              
----------------------------------------
9223372036854775809                     

1 rows fetched.

SQL> select 9223372036854775808 - (-1) from dual;

9223372036854775808 - (-1)              
----------------------------------------
9223372036854775809                     

1 rows fetched.

SQL> 
SQL> 
SQL> ----test uint32
SQL> Drop table if exists type_test;

Succeed.

SQL> Drop table if exists type_test1;

Succeed.

SQL> create table type_test(f1 bool, f2 int, f3 uint, f4 bigint, f5 serial primary key, f6 varchar(10));

Succeed.

SQL> insert into type_test values(1, 2147483647, 4294967295, 9223372036854775807, 1,'haha1');

1 rows affected.

SQL> insert into type_test values(1, -2147483648, 0, -9223372036854775808, 2,'haha2');

1 rows affected.

SQL> insert into type_test values(1, 234, 432, 3456, 3,'haha3');

1 rows affected.

SQL> Alter table type_test add column f8 uint default 0;

Succeed.

SQL> select * from type_test order by f5;

F1     F2           F3           F4                   F5                   F6         F8          
------ ------------ ------------ -------------------- -------------------- ---------- ------------
TRUE   2147483647   4294967295   9223372036854775807  1                    haha1      0           
TRUE   -2147483648  0            -9223372036854775808 2                    haha2      0           
TRUE   234          432          3456                 3                    haha3      0           

3 rows fetched.

SQL> Alter table type_test drop column f8;

Succeed.

SQL> Create table type_test1 as select * from type_test;

Succeed.

SQL> Create index IDX_type_test1 on type_test1(f3,f5);

Succeed.

SQL> Create index IDX_type_test2 on type_test1(f3);

Succeed.

SQL> Select  distinct f3,f5 from type_test1 order by f5 desc ;

F3           F5                  
------------ --------------------
432          3                   
0            2                   
4294967295   1                   

3 rows fetched.

SQL> Select  distinct *,f5 from type_test1 where f3 !=1 order by f3 desc ;

F1     F2           F3           F4                   F5                   F6         F5                  
------ ------------ ------------ -------------------- -------------------- ---------- --------------------
TRUE   2147483647   4294967295   9223372036854775807  1                    haha1      1                   
TRUE   234          432          3456                 3                    haha3      3                   
TRUE   -2147483648  0            -9223372036854775808 2                    haha2      2                   

3 rows fetched.

SQL> Select f1,f2,f3,f4,f5,f6 from type_test1 start with f3=0 connect by prior f5 = 0 order by f3 desc;

F1     F2           F3           F4                   F5                   F6        
------ ------------ ------------ -------------------- -------------------- ----------
TRUE   -2147483648  0            -9223372036854775808 2                    haha2     

1 rows fetched.

SQL> Select f1,f2,f3,f4,f5,f6 from type_test1 start with f5=0 connect by prior f3 = 0  and  prior f5 = 0 order by f5 desc;

F1     F2           F3           F4                   F5                   F6        
------ ------------ ------------ -------------------- -------------------- ----------

0 rows fetched.

SQL> Select sum(f3),f3 from type_test1 group by f3 having avg(f2) >= 0 order by f3 desc;

SUM(F3)              F3          
-------------------- ------------
4294967295           4294967295  
432                  432         

2 rows fetched.

SQL> Alter table type_test add column f8 uint;

Succeed.

SQL> Alter table type_test add column f9 binary_uint32;

Succeed.

SQL> Alter table type_test add column f10 integer unsigned;

Succeed.

SQL> Desc type_test;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           BOOLEAN                             
F2                                           BINARY_INTEGER                      
F3                                           BINARY_UINT32                       
F4                                           BINARY_BIGINT                       
F5                                  NOT NULL BINARY_BIGINT                       
F6                                           VARCHAR(10 BYTE)                    
F8                                           BINARY_UINT32                       
F9                                           BINARY_UINT32                       
F10                                          BINARY_UINT32                       

SQL> Alter table type_test drop column f10;

Succeed.

SQL> Alter table type_test modify f9 bigint;

Succeed.

SQL> Desc type_test;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           BOOLEAN                             
F2                                           BINARY_INTEGER                      
F3                                           BINARY_UINT32                       
F4                                           BINARY_BIGINT                       
F5                                  NOT NULL BINARY_BIGINT                       
F6                                           VARCHAR(10 BYTE)                    
F8                                           BINARY_UINT32                       
F9                                           BINARY_BIGINT                       

SQL> Drop table if exists type_test;

Succeed.

SQL> Drop table if exists type_test1;

Succeed.

SQL> 
SQL> Drop table if exists test_add_sub_mul_div;

Succeed.

SQL> Drop table if exists test_uint32;

Succeed.

SQL> create table test_add_sub_mul_div(a integer unsigned ,b integer);

Succeed.

SQL> insert into test_add_sub_mul_div values(-1 ,1);

CT-00659, UNSIGNED INTEGER out of range
SQL> insert into test_add_sub_mul_div values(4294967295::uint +10   ,1);

CT-00659, UNSIGNED INTEGER out of range
SQL> insert into test_add_sub_mul_div values(4294967295   ,1);

1 rows affected.

SQL> insert into test_add_sub_mul_div values(4294967295   ,-1);

1 rows affected.

SQL> insert into test_add_sub_mul_div values(4294967295   ,21342142);

1 rows affected.

SQL> insert into test_add_sub_mul_div values(100,101);

1 rows affected.

SQL> Select a+b from test_add_sub_mul_div order by b desc;

A+B                 
--------------------
4316309437          
201                 
4294967296          
4294967294          

4 rows fetched.

SQL> Select b+a from test_add_sub_mul_div order by b desc;

B+A                 
--------------------
4316309437          
201                 
4294967296          
4294967294          

4 rows fetched.

SQL> Select a*b from test_add_sub_mul_div order by b desc;

A*B                 
--------------------
91663801895245890   
10100               
4294967295          
-4294967295         

4 rows fetched.

SQL> Select b*a from test_add_sub_mul_div order by b desc;

B*A                 
--------------------
91663801895245890   
10100               
4294967295          
-4294967295         

4 rows fetched.

SQL> Select round(a/b,2) from test_add_sub_mul_div  order by b desc;

ROUND(A/B,2)                            
----------------------------------------
201.24                                  
.99                                     
4294967295                              
-4294967295                             

4 rows fetched.

SQL> Select round(b/a,2) from test_add_sub_mul_div  order by b desc;

ROUND(B/A,2)                            
----------------------------------------
0                                       
1.01                                    
0                                       
0                                       

4 rows fetched.

SQL> Select a-b from test_add_sub_mul_div order by b desc;

A-B                 
--------------------
4273625153          
-1                  
4294967294          
4294967296          

4 rows fetched.

SQL> Select b-a from test_add_sub_mul_div order by b desc;

B-A                 
--------------------
-4273625153         
1                   
-4294967294         
-4294967296         

4 rows fetched.

SQL> Select -a from  test_add_sub_mul_div where b=-1;

-A                  
--------------------
-4294967295         

1 rows fetched.

SQL> Create table test_uint32(a integer unsigned , b integer unsigned);

Succeed.

SQL> Insert into  test_uint32 values(0,4294967295);

1 rows affected.

SQL> Insert into test_uint32 values(10,11);

1 rows affected.

SQL> Insert into test_uint32 values(10,10);

1 rows affected.

SQL> Select a-b from test_uint32;

A-B                 
--------------------
-4294967295         
-1                  
0                   

3 rows fetched.

SQL> select mod(a,b) from test_uint32;

MOD(A,B)                                
----------------------------------------
0                                       
10                                      
0                                       

3 rows fetched.

SQL> Select concat(a,b) from test_uint32;

CONCAT(A,B)         
--------------------
04294967295         
1011                
1010                

3 rows fetched.

SQL> Select concat_ws('-',a,b) from test_uint32;

CONCAT_WS('-',A,B)   
---------------------
0-4294967295         
10-11                
10-10                

3 rows fetched.

SQL> select a&b from test_uint32 order by b;

A&B                 
--------------------
10                  
10                  
0                   

3 rows fetched.

SQL> select a|b from test_uint32 order by b;

A|B                 
--------------------
10                  
11                  
4294967295          

3 rows fetched.

SQL> select a^b from test_uint32 order by b;

A^B                 
--------------------
0                   
1                   
4294967295          

3 rows fetched.

SQL> select b<<1 from test_uint32 order by b;

B<<1                
--------------------
20                  
22                  
8589934590          

3 rows fetched.

SQL> select b>>1 from test_uint32 order by b;

B>>1                
--------------------
5                   
5                   
2147483647          

3 rows fetched.

SQL> Drop table if exists test_add_sub_mul_div;

Succeed.

SQL> Drop table if exists test_uint32;

Succeed.

SQL> 
SQL> select 4294967295::uint from dual;

4294967295::UINT
----------------
4294967295      

1 rows fetched.

SQL> select -1::uint from dual;

CT-00659, [1:10]UNSIGNED INTEGER out of range
SQL> select 0::uint from dual;

0::UINT     
------------
0           

1 rows fetched.

SQL> select -10::uint from dual;

CT-00659, [1:11]UNSIGNED INTEGER out of range
SQL> select -1::integer unsigned from dual;

CT-00659, [1:10]UNSIGNED INTEGER out of range
SQL> select 10::integer unsigned from dual;

10::INTEGER UNSIGNED
--------------------
10                  

1 rows fetched.

SQL> desc -q select 10::integer unsigned from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
10::INTEGER UNSIGNED                         BINARY_UINT32                       

SQL> desc -q select ifnull(null,-1::uint);

CT-00659, [1:22]UNSIGNED INTEGER out of range

SQL> select 1 from dual where 2::integer unsigned > 1::integer unsigned;

1           
------------
1           

1 rows fetched.

SQL> select 1 from dual where 2::integer unsigned < 1::integer unsigned;

1           
------------

0 rows fetched.

SQL> select 1 from dual where 2::integer unsigned >= 1::integer unsigned;

1           
------------
1           

1 rows fetched.

SQL> select 1 from dual where 2::integer unsigned <= 1::integer unsigned;

1           
------------

0 rows fetched.

SQL> select 1 from dual where 2::integer unsigned != 1::integer unsigned;

1           
------------
1           

1 rows fetched.

SQL> drop table if exists test_uint32;

Succeed.

SQL> create table test_uint32(a integer unsigned);

Succeed.

SQL> insert into test_uint32 values(4294967295);

1 rows affected.

SQL> insert into test_uint32 values(100000);

1 rows affected.

SQL> insert into test_uint32 values(0);

1 rows affected.

SQL> select a from test_uint32 where a > -1 order by a;

A           
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select a from test_uint32 where a > 4294967296 order by a;

A           
------------

0 rows fetched.

SQL> select a from test_uint32 where a >= -1 order by a;

A           
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select a from test_uint32 where a >= 4294967296 order by a;

A           
------------

0 rows fetched.

SQL> select a from test_uint32 where a < -1 order by a;

A           
------------

0 rows fetched.

SQL> select a from test_uint32 where a < 4294967296 order by a;

A           
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select a from test_uint32 where a <= -1 order by a;

A           
------------

0 rows fetched.

SQL> select a from test_uint32 where a <= 4294967296 order by a;

A           
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select a from test_uint32 where a != -1 order by a;

A           
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select a from test_uint32 where a != 4294967296 order by a;

A           
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select a from test_uint32 where a in (0,100000,4294967295) order by a;

A           
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select 1 from dual where not exists (select a from test_uint32 where a in (0,100000,4294967295) order by a);

1           
------------

0 rows fetched.

SQL> select 1 from dual where exists (select a from test_uint32 where a not in (-1) order by a);

1           
------------
1           

1 rows fetched.

SQL> select a from test_uint32 where a between -100 and 100000000000000000000 order by a;

A           
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select a from test_uint32 where a not between 0 and 100000 order by a;

A           
------------
4294967295  

1 rows fetched.

SQL> select a from test_uint32 where a is null order by a;

A           
------------

0 rows fetched.

SQL> select a from test_uint32 where a is not null order by a;

A           
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select * from test_uint32 where to_char(a) LIKE '%294%' order by a;

A           
------------
4294967295  

1 rows fetched.

SQL> select * from test_uint32 where to_char(a) not LIKE '%294%' order by a;

A           
------------
0           
100000      

2 rows fetched.

SQL> select * from test_uint32 where to_char(a) regexp '[1-9]*' order by a;

A           
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select * from test_uint32 where regexp_like (a ,'[1-9]*') order by a;

A           
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select * from test_uint32 where a = ANY(0,3,5) order by a;

A           
------------
0           

1 rows fetched.

SQL> select * from test_uint32 where a = ANY('zhangsan') order by a;

CT-00636, Invalid number -- unexpected character
SQL> select cast(a as int) from test_uint32 order by a;

CT-00659, [1:8]INTEGER out of range
SQL> select cast(a as bigint) from test_uint32 order by a;

CAST(A AS BIGINT)   
--------------------
0                   
100000              
4294967295          

3 rows fetched.

SQL> select cast(a as varchar(20)) from test_uint32 order by a;

CAST(A AS VARCHAR(20))
----------------------
0                     
100000                
4294967295            

3 rows fetched.

SQL> select cast(a as number(5,0)) from test_uint32 order by a;

CT-00635, [1:8]Value error: value larger than specified precision
SQL> select cast(a as number(10,0)) from test_uint32 order by a;

CAST(A AS NUMBER(10,0))                 
----------------------------------------
0                                       
100000                                  
4294967295                              

3 rows fetched.

SQL> select convert (a, varchar(20)) from test_uint32 order by a;

CONVERT (A, VARCHAR(20))
------------------------
0                       
100000                  
4294967295              

3 rows fetched.

SQL> select convert (a, bigint) from test_uint32 order by a;

CONVERT (A, BIGINT) 
--------------------
0                   
100000              
4294967295          

3 rows fetched.

SQL> select convert (a, int) from test_uint32 order by a;

CT-00659, [1:8]INTEGER out of range
SQL> select convert (a, number(5,0)) from test_uint32 order by a;

CT-00635, [1:8]Value error: value larger than specified precision
SQL> select convert (a, number(10,0)) from test_uint32 order by a;

CONVERT (A, NUMBER(10,0))               
----------------------------------------
0                                       
100000                                  
4294967295                              

3 rows fetched.

SQL> select DECODE(a, 0, 'AAA', 100000, 'BBB', 'OK') from test_uint32 order by a;

DECODE(A, 0, 'AAA', 100000, 'BBB', 'OK')
----------------------------------------
AAA                                     
BBB                                     
OK                                      

3 rows fetched.

SQL> select if(a<=0, ifnull(to_char(a),a), ifnull(null,a)) from test_uint32 order by a;

IF(A<=0, IFNULL(TO_CHAR(A),A), IFNULL(NULL,A))
----------------------------------------------
0                                             
100000                                        
4294967295                                    

3 rows fetched.

SQL> select if(a>0, ifnull(456,null), ifnull(null,123)) from test_uint32 order by a;

IF(A>0, IFNULL(456,NULL), IFNULL(NULL,123))
-------------------------------------------
123                                        
456                                        
456                                        

3 rows fetched.

SQL> select nvl(a,0) from test_uint32 order by a;

NVL(A,0)    
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select NVL2(a,a,a) from test_uint32 order by a;

NVL2(A,A,A) 
------------
0           
100000      
4294967295  

3 rows fetched.

SQL> select to_clob(a+1) from test_uint32 order by a;

TO_CLOB(A+1)                                                    
----------------------------------------------------------------
1                                                               
100001                                                          
4294967296                                                      

3 rows fetched.

SQL> select to_date(a,'YYYY-MM-DD HH24:MI:SS:FF') from test_uint32 order by a;

CT-00105, [1:8]Invalid format of datetime
SQL> select to_number(a,'0000000000') from test_uint32 where a = 4294967295;

TO_NUMBER(A,'0000000000')               
----------------------------------------
4294967295                              

1 rows fetched.

SQL> select sum(a),max(a),min(a),count(a),round(avg(a),2) from test_uint32;

SUM(A)               MAX(A)       MIN(A)       COUNT(A)             ROUND(AVG(A),2)                         
-------------------- ------------ ------------ -------------------- ----------------------------------------
4295067295           4294967295   0            3                    1431689098.33                           

1 rows fetched.

SQL> select STDDEV(a) from test_uint32;

CT-00659, BIGINT out of range
SQL> select STDDEV_SAMP(a) from test_uint32; 

CT-00659, BIGINT out of range
SQL> select GROUP_CONCAT(a) from test_uint32; 

GROUP_CONCAT(A)                                                 
----------------------------------------------------------------
4294967295,100000,0                                             

1 rows fetched.

SQL> select lag(a,2,null)over(partition by a order by a) from test_uint32;

LAG(A,2,NULL)OVER(PARTITION BY A ORDER BY A)
--------------------------------------------
                                            
                                            
                                            

3 rows fetched.

SQL> select COALESCE(null,null,a+10) from test_uint32 order by a;

COALESCE(NULL,NULL,A+10)
------------------------
10                      
100010                  
4294967305              

3 rows fetched.

SQL> SELECT DBA_IND_POS(to_char(a),'100000') from test_uint32 where a = 100000;

CT-00828, [1:8]function SYS.DBA_IND_POS does not exist
SQL> select GREATEST(a-42949672951) from test_uint32 order by a;

GREATEST(A-42949672951)
-----------------------
-42949672951           
-42949572951           
-38654705656           

3 rows fetched.

SQL> select LEAST(a+10) from test_uint32 order by a;

LEAST(A+10)         
--------------------
10                  
100010              
4294967305          

3 rows fetched.

SQL> SELECT VSIZE(a) FROM test_uint32 order by a;

VSIZE(A)            
--------------------
4                   
4                   
4                   

3 rows fetched.

SQL> desc -q select nullif(4294967295, -1) from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
NULLIF(4294967295, -1)                       BINARY_BIGINT                       

SQL> select nullif(a, -1) from  test_uint32 order by a;

NULLIF(A, -1)       
--------------------
0                   
100000              
4294967295          

3 rows fetched.

SQL> select coalesce(a,-1) from test_uint32 order by a;

COALESCE(A,-1)      
--------------------
0                   
100000              
4294967295          

3 rows fetched.

SQL> drop table if exists test_uint32;

Succeed.

SQL> 
SQL> drop procedure if exists proc_test_unint32;

Succeed.

SQL> create or replace procedure proc_test_unint32(
  2 para1 integer unsigned
  3 ) as
  4 v_name varchar2(20);
  5 v_para integer unsigned;
  6 begin
  7  v_para := para1 + 1;
  8  v_name :='zhangsf';
  9 dbe_output.print_line(v_name || para1);
 10 end;
 11 /

Succeed.

SQL> begin
  2 proc_test_unint32(4294967295);
  3 end;
  4 /

CT-00932, [2:1] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[7:2] PL/SQL(SYS.PROC_TEST_UNINT32) terminated with execute errors
[7:2] CT-00659, UNSIGNED INTEGER out of range

SQL> select * from table(dba_proc_line('SYS', 'PROC_TEST_UNINT32'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE PROC_TEST_UNINT32 (                 
2            para1 integer unsigned                                          
3            ) as                                                            
4            v_name varchar2(20);                                            
5            v_para integer unsigned;                                        
6            begin                                                           
7             v_para := para1 + 1;                                           
8             v_name :='zhangsf';                                            
9            dbe_output.print_line(v_name || para1);                         
10           end;                                                            
11           /                                                               

11 rows fetched.

SQL> drop procedure if exists proc_test_unint32;

Succeed.

SQL> 
SQL> declare 
  2   i integer unsigned;
  3   str varchar(100);
  4 begin
  5   i := 1;  
  6   execute immediate 'drop table if exists test_uint32';
  7   execute immediate 'create table test_uint32(a integer unsigned)';
  8   for i in 1..3 
  9   loop
 10 	str := 'insert into test_uint32 values('||i||')';
 11 	execute immediate str;
 12   end loop;
 13   execute immediate 'drop table if exists test_uint32';
 14 end;
 15 /

PL/SQL procedure successfully completed.

SQL> 
SQL> drop table if exists a_int;

Succeed.

SQL> drop table if exists a_bigint;

Succeed.

SQL> drop table if exists a_uint32;

Succeed.

SQL> drop table if exists a_int_ua_bigint_ua_uint32_table ;

Succeed.

SQL> drop table if exists a_uint32_ua_bigint_ua_int_table ;

Succeed.

SQL> drop table if exists a_int_ua_uint32_ua_bigint_table ;

Succeed.

SQL> drop table if exists  a_bigint_ua_uint32_ua_int_table;

Succeed.

SQL> drop table if exists a_bigint_ua_int_ua_uint32_table;

Succeed.

SQL> drop table if exists a_uint32_ua_int_ua_bigint_table;

Succeed.

SQL> create table a_int(a int);

Succeed.

SQL> create table a_bigint(a bigint);

Succeed.

SQL> create table a_uint32(a integer unsigned);

Succeed.

SQL> insert into a_int values(-1);

1 rows affected.

SQL> insert into a_bigint values(9223372036854775807);

1 rows affected.

SQL> insert into a_uint32 values(4294967295);

1 rows affected.

SQL> create table a_int_ua_bigint_ua_uint32_table as (select b.a from (select a from a_int union all select a from a_bigint union all select a from a_uint32) b);

Succeed.

SQL> create table a_uint32_ua_bigint_ua_int_table as (select b.a from (select a from a_uint32 union all select a from a_bigint union all select a from a_int) b);

Succeed.

SQL> create table a_int_ua_uint32_ua_bigint_table as (select b.a from (select a from a_int union all select a from a_uint32 union all select a from a_bigint) b);

Succeed.

SQL> create table a_bigint_ua_uint32_ua_int_table as (select b.a from (select a from a_bigint union all select a from a_uint32 union all select a from a_int) b);

Succeed.

SQL> create table a_bigint_ua_int_ua_uint32_table as (select b.a from (select a from a_bigint union all select a from a_int union all select a from a_uint32) b);

Succeed.

SQL> create table a_uint32_ua_int_ua_bigint_table as (select b.a from (select a from a_uint32 union all select a from a_int union all select a from a_bigint) b);

Succeed.

SQL> desc a_int_ua_bigint_ua_uint32_table ;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_BIGINT                       

SQL> desc a_uint32_ua_bigint_ua_int_table ;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_BIGINT                       

SQL> desc a_int_ua_uint32_ua_bigint_table ;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_BIGINT                       

SQL> desc a_bigint_ua_uint32_ua_int_table;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_BIGINT                       

SQL> desc a_bigint_ua_int_ua_uint32_table;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_BIGINT                       

SQL> desc a_uint32_ua_int_ua_bigint_table;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_BIGINT                       

SQL> select * from a_int_ua_bigint_ua_uint32_table order by a;

A                   
--------------------
-1                  
4294967295          
9223372036854775807 

3 rows fetched.

SQL> select * from a_uint32_ua_bigint_ua_int_table order by a;

A                   
--------------------
-1                  
4294967295          
9223372036854775807 

3 rows fetched.

SQL> select * from a_int_ua_uint32_ua_bigint_table order by a;

A                   
--------------------
-1                  
4294967295          
9223372036854775807 

3 rows fetched.

SQL> select * from a_bigint_ua_uint32_ua_int_table order by a;

A                   
--------------------
-1                  
4294967295          
9223372036854775807 

3 rows fetched.

SQL> select * from a_bigint_ua_int_ua_uint32_table order by a;

A                   
--------------------
-1                  
4294967295          
9223372036854775807 

3 rows fetched.

SQL> select * from a_uint32_ua_int_ua_bigint_table order by a;

A                   
--------------------
-1                  
4294967295          
9223372036854775807 

3 rows fetched.

SQL> drop table if exists a_int;

Succeed.

SQL> drop table if exists a_bigint;

Succeed.

SQL> drop table if exists a_uint32;

Succeed.

SQL> drop table if exists a_int_ua_bigint_ua_uint32_table ;

Succeed.

SQL> drop table if exists a_uint32_ua_bigint_ua_int_table ;

Succeed.

SQL> drop table if exists a_int_ua_uint32_ua_bigint_table ;

Succeed.

SQL> drop table if exists  a_bigint_ua_uint32_ua_int_table;

Succeed.

SQL> drop table if exists a_bigint_ua_int_ua_uint32_table;

Succeed.

SQL> drop table if exists a_uint32_ua_int_ua_bigint_table;

Succeed.

SQL> 
SQL> drop table if exists a_int    ;

Succeed.

SQL> drop table if exists a_uint32       ;

Succeed.

SQL> drop table if exists a_int_ua_uint32;

Succeed.

SQL> drop table if exists a_uint32_ua_int;

Succeed.

SQL> create table a_int(a int);

Succeed.

SQL> create table a_uint32(a integer unsigned);

Succeed.

SQL> insert into a_int values(-1);

1 rows affected.

SQL> insert into a_uint32 values(4294967295);

1 rows affected.

SQL> create table a_int_ua_uint32 as (select b.a from (select a from a_int union all select a from a_uint32) b);

Succeed.

SQL> create table a_uint32_ua_int as (select b.a from (select a from a_uint32 union all select a from a_int) b);

Succeed.

SQL> desc a_int_ua_uint32;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_BIGINT                       

SQL> desc a_uint32_ua_int;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_BIGINT                       

SQL> select * from a_int_ua_uint32 order by a;

A                   
--------------------
-1                  
4294967295          

2 rows fetched.

SQL> select * from a_uint32_ua_int order by a;

A                   
--------------------
-1                  
4294967295          

2 rows fetched.

SQL> drop table if exists a_int    ;

Succeed.

SQL> drop table if exists a_uint32       ;

Succeed.

SQL> drop table if exists a_int_ua_uint32;

Succeed.

SQL> drop table if exists a_uint32_ua_int;

Succeed.

SQL> 
SQL> drop table if exists test_uint32;

Succeed.

SQL> create table test_uint32(a int, b int unsigned);

Succeed.

SQL> insert into test_uint32 values(-1, 4294967295);

1 rows affected.

SQL> insert into test_uint32 values(-2, 4294967291);

1 rows affected.

SQL> insert into test_uint32 values(3, 3294967291);

1 rows affected.

SQL> insert into test_uint32 values(0, 4294967295/2);

1 rows affected.

SQL> insert into test_uint32 values(-4294967295/2, 0);

1 rows affected.

SQL> select * from test_uint32 order by a;

A            B           
------------ ------------
-2147483648  0           
-2           4294967291  
-1           4294967295  
0            2147483648  
3            3294967291  

5 rows fetched.

SQL> select mod(a,b) from test_uint32 order by a;

MOD(A,B)                                
----------------------------------------
-2147483648                             
-2                                      
-1                                      
0                                       
3                                       

5 rows fetched.

SQL> select mod(b,a) from test_uint32 order by a;

MOD(B,A)                                
----------------------------------------
0                                       
1                                       
0                                       
2147483648                              
1                                       

5 rows fetched.

SQL> select a%b from test_uint32 order by a;

A%B                 
--------------------
                    
-2                  
-1                  
0                   
3                   

5 rows fetched.

SQL> select b%a from test_uint32 order by a;

B%A                 
--------------------
0                   
1                   
0                   
                    
1                   

5 rows fetched.

SQL> drop table if exists test_uint32;

Succeed.

SQL> 
SQL> --timestamp with time zone
SQL> drop table if exists t_date;

Succeed.

SQL> CREATE TABLE t_date(c1 int,c2 int,c3 date,c4 timestamp with time zone unique);

CT-00601, Sql syntax error: column of datatype TIMESTAMP WITH TIME ZONE cannot be unique or a primary key
SQL> CREATE TABLE t_date(c1 int,c2 int,c3 date,c4 timestamp with time zone primary key);

CT-00601, Sql syntax error: column of datatype TIMESTAMP WITH TIME ZONE cannot be unique or a primary key
SQL> 
SQL> drop table if exists t_date;

Succeed.

SQL> CREATE TABLE t_date(a TIMESTAMP WITH TIME ZONE , b int);

Succeed.

SQL> alter table t_date add constraint con unique(a);

CT-00601, Sql syntax error: column of datatype TIMESTAMP WITH TIME ZONE cannot be unique or a primary key
SQL> alter table t_date add constraint con unique(a, b);

CT-00601, Sql syntax error: column of datatype TIMESTAMP WITH TIME ZONE cannot be unique or a primary key
SQL> alter table t_date add constraint con unique(b, a);

CT-00601, Sql syntax error: column of datatype TIMESTAMP WITH TIME ZONE cannot be unique or a primary key
SQL> alter table t_date add constraint conx primary key(a);

CT-00601, Sql syntax error: column of datatype TIMESTAMP WITH TIME ZONE cannot be unique or a primary key
SQL> alter table t_date add constraint conx primary key(a ,b);

CT-00601, Sql syntax error: column of datatype TIMESTAMP WITH TIME ZONE cannot be unique or a primary key
SQL> alter table t_date add constraint conx primary key(b ,a);

CT-00601, Sql syntax error: column of datatype TIMESTAMP WITH TIME ZONE cannot be unique or a primary key
SQL> drop table if exists t_date;

Succeed.

SQL> 
SQL> --ltz in order clause of sql
SQL> ALTER SESSION SET TIME_ZONE='+08:00';

Succeed.

SQL> drop table if exists tstz_type_test_tbl;

Succeed.

SQL> create table tstz_type_test_tbl(a int, b timestamp with local time zone default localtimestamp);

Succeed.

SQL> insert into tstz_type_test_tbl values(1,'2019-04-24 14:36:25.046731');

1 rows affected.

SQL> insert into tstz_type_test_tbl values(2,'2019-04-24 14:36:25.048023');

1 rows affected.

SQL> insert into tstz_type_test_tbl values(3,'2019-04-24 14:36:25.048802');

1 rows affected.

SQL> 
SQL> select b from tstz_type_test_tbl;

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> select b from (select b from tstz_type_test_tbl);

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> select b from(select b from (select b from tstz_type_test_tbl));

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> select b from (select b from(select b from (select b from tstz_type_test_tbl)));

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> 
SQL> select b from tstz_type_test_tbl;

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> select b from (select b from tstz_type_test_tbl order by a);

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> select b from (select b from (select b from tstz_type_test_tbl order by a));

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> select b from (select b from (select b from (select b from tstz_type_test_tbl order by a)));

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> 
SQL> select b from tstz_type_test_tbl order by a;

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> select b from (select b from tstz_type_test_tbl order by a) order by b;

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> select b from (select b from (select b from tstz_type_test_tbl order by a)) order by b;

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> select b from (select b from (select b from (select b from tstz_type_test_tbl order by a))) order by b;

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> 
SQL> select b from tstz_type_test_tbl;

B                               
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> select cast(b as date) from tstz_type_test_tbl;

CAST(B AS DATE)       
----------------------
2019-04-24 14:36:25   
2019-04-24 14:36:25   
2019-04-24 14:36:25   

3 rows fetched.

SQL> select cast(b as timestamp) from tstz_type_test_tbl;

CAST(B AS TIMESTAMP)            
--------------------------------
2019-04-24 14:36:25.046731      
2019-04-24 14:36:25.048023      
2019-04-24 14:36:25.048802      

3 rows fetched.

SQL> select cast(b as timestamp with time zone) from tstz_type_test_tbl;

CAST(B AS TIMESTAMP WITH TIME ZONE)     
----------------------------------------
2019-04-24 14:36:25.046731 +08:00       
2019-04-24 14:36:25.048023 +08:00       
2019-04-24 14:36:25.048802 +08:00       

3 rows fetched.

SQL> select cast(b as timestamp with local time zone) from tstz_type_test_tbl;

CAST(B AS TIMESTAMP WITH LOCAL TIME ZONE)
-----------------------------------------
2019-04-24 14:36:25.046731               
2019-04-24 14:36:25.048023               
2019-04-24 14:36:25.048802               

3 rows fetched.

SQL> 
SQL> --diff session tz
SQL> ALTER SESSION SET TIME_ZONE='+02:00';

Succeed.

SQL> SELECT SESSIONTIMEZONE FROM DUAL;

SESSIONTIMEZONE
---------------
+02:00         

1 rows fetched.

SQL> select b from tstz_type_test_tbl;

B                               
--------------------------------
2019-04-24 08:36:25.046731      
2019-04-24 08:36:25.048023      
2019-04-24 08:36:25.048802      

3 rows fetched.

SQL> 
SQL> ALTER SESSION SET TIME_ZONE='+05:00';

Succeed.

SQL> SELECT SESSIONTIMEZONE FROM DUAL;

SESSIONTIMEZONE
---------------
+05:00         

1 rows fetched.

SQL> select b from tstz_type_test_tbl;

B                               
--------------------------------
2019-04-24 11:36:25.046731      
2019-04-24 11:36:25.048023      
2019-04-24 11:36:25.048802      

3 rows fetched.

SQL> 
SQL> ALTER SESSION SET TIME_ZONE='-1:00';

Succeed.

SQL> SELECT SESSIONTIMEZONE FROM DUAL;

SESSIONTIMEZONE
---------------
-01:00         

1 rows fetched.

SQL> select b from tstz_type_test_tbl;

B                               
--------------------------------
2019-04-24 05:36:25.046731      
2019-04-24 05:36:25.048023      
2019-04-24 05:36:25.048802      

3 rows fetched.

SQL> 
SQL> ALTER SESSION SET TIME_ZONE='+08:00';

Succeed.

SQL> drop table if exists tstz_type_test_tbl;

Succeed.

SQL> 
SQL> drop table if exists t_const2num_1;

Succeed.

SQL> drop table if exists t_const2num_2;

Succeed.

SQL> create table t_const2num_1(
  2 c_int int, c_binary_uint binary_uint32, c_int_unsigned integer unsigned, c_bigint bigint,
  3 c_double double, c_float float, c_real real,
  4 c_number number, c_dec decimal(20,5),
  5 c_varchar varchar(50)
  6 ) ;

Succeed.

SQL> create table t_const2num_2(
  2 c_int int, c_binary_uint binary_uint32, c_int_unsigned integer unsigned, c_bigint bigint,
  3 c_double double, c_float float, c_real real,
  4 c_number number, c_dec decimal(20,5),
  5 c_varchar varchar(50)
  6 ) ;

Succeed.

SQL> insert into t_const2num_1 values(
  2 1, 5, 4294967295, 9223372036854775807,
  3 1.12345, 0.001, 123.456,
  4 1.234, 123456.12345,
  5 'hello'
  6 );

1 rows affected.

SQL> insert into t_const2num_2 values(
  2 1, 100, 4294967295, 9223372036854775807,
  3 1.12345, 10.00001, 1234.567,
  4 1.234, 123456.12345,
  5 'nihao'
  6 );

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select c_int, c_varchar from t_const2num_1 where c_int = '1';

C_INT        C_VARCHAR                                         
------------ --------------------------------------------------
1            hello                                             

1 rows fetched.

SQL> select c_int, c_varchar from t_const2num_1 where c_bigint = '9223372036854775807';

C_INT        C_VARCHAR                                         
------------ --------------------------------------------------
1            hello                                             

1 rows fetched.

SQL> select c_int, c_varchar from t_const2num_1 where c_float = '0.001000';

C_INT        C_VARCHAR                                         
------------ --------------------------------------------------
1            hello                                             

1 rows fetched.

SQL> select c_int, c_varchar from t_const2num_1 where '-1.001' < c_real;

C_INT        C_VARCHAR                                         
------------ --------------------------------------------------
1            hello                                             

1 rows fetched.

SQL> select c_int, c_varchar from t_const2num_1 where abs(c_number) = '+1.234';

C_INT        C_VARCHAR                                         
------------ --------------------------------------------------
1            hello                                             

1 rows fetched.

SQL> select c_int, c_varchar from t_const2num_1 where c_dec + 1 = '123457.12345';

C_INT        C_VARCHAR                                         
------------ --------------------------------------------------
1            hello                                             

1 rows fetched.

SQL> select t1.c_int, t2.c_varchar from t_const2num_1 t1 join t_const2num_2 t2 on t1.c_int = t2.c_int and t1.c_real = '123.456' ;

C_INT        C_VARCHAR                                         
------------ --------------------------------------------------
1            nihao                                             

1 rows fetched.

SQL> select c_int, count(c_int) from t_const2num_1 group by c_int having count(c_int) = '1.0';

C_INT        COUNT(C_INT)        
------------ --------------------
1            1                   

1 rows fetched.

SQL> select c_int, c_varchar from t_const2num_1 where '1' = (select count(*) from t_const2num_2);

C_INT        C_VARCHAR                                         
------------ --------------------------------------------------
1            hello                                             

1 rows fetched.

SQL> select case when c_int ='1' then c_float else c_number end c from t_const2num_1 where c_double > '1.123400';

C                   
--------------------
0.001               

1 rows fetched.

SQL> select t1.c_int, t2.c_varchar from t_const2num_1 t1 join t_const2num_2 t2 on t1.c_int = t2.c_int 
  2     where exists (select 1 from t_const2num_1 where rownum < '9.9') or t1.c_int_unsigned <> '-1';

C_INT        C_VARCHAR                                         
------------ --------------------------------------------------
1            nihao                                             

1 rows fetched.

SQL> select level,PRIOR c_int, c_varchar from t_const2num_1 where c_dec >= '123456.12345' and level = '1' 
  2     start with c_int = '1' connect by nocycle PRIOR c_binary_uint < '100';

LEVEL        PRIOR C_INT  C_VARCHAR                                         
------------ ------------ --------------------------------------------------
1                         hello                                             

1 rows fetched.

SQL> 
SQL> drop table t_const2num_1;

Succeed.

SQL> drop table t_const2num_2;

Succeed.

SQL> 
SQL> drop table if exists t_test_bigint_sub;

Succeed.

SQL> create table t_test_bigint_sub(t1 uint, t2 bigint, t3 real);

Succeed.

SQL> insert into t_test_bigint_sub values(123, -9223372036854775808, 234);

1 rows affected.

SQL> select t1-t2 from t_test_bigint_sub;

CT-00659, [1:10]BIGINT out of range
SQL> select t3-t2 from t_test_bigint_sub;

T3-T2               
--------------------
9.22337203685478e+18

1 rows fetched.

SQL> 
SQL> drop table if exists FVT_FUCTION_GREATEST_TABLE_001;

Succeed.

SQL> create table FVT_FUCTION_GREATEST_TABLE_001( 
  2 COL_1 bigint, 
  3 COL_2 TIMESTAMP WITHOUT TIME ZONE, 
  4 constraint FUCTION_GREATEST_TABLE_001 primary key(COL_1)
  5 );

Succeed.

SQL> 
SQL> drop table if exists FVT_FUCTION_GREATEST_TABLE_002;

Succeed.

SQL> create table FVT_FUCTION_GREATEST_TABLE_002( 
  2 COL_1 bigint, 
  3 COL_2 TIMESTAMP WITHOUT TIME ZONE, 
  4 constraint FUCTION_GREATEST_TABLE_002 primary key(COL_1)
  5 );

Succeed.

SQL> 
SQL> set serveroutput on;

ON
SQL> declare
  2 v_count_01 int;
  3 BEGIN
  4 EXECUTE IMMEDIATE 'INSERT INTO FVT_FUCTION_GREATEST_TABLE_002 (COL_1,COL_2) SELECT COL_1,COL_2 FROM FVT_FUCTION_GREATEST_TABLE_001  WHERE COL_1>=GREATEST(:v1,:v2)' USING null,null;
  5 select 
  6 	count(1)   into v_count_01 
  7 from 
  8 (
  9 	select COL_1,COL_2 from FVT_FUCTION_GREATEST_TABLE_001 where COL_1>=GREATEST(null,null) 
 10 	except 
 11 	select COL_1,COL_2 from FVT_FUCTION_GREATEST_TABLE_002
 12 );
 13 dbe_output.print_line(v_count_01);
 14 EXCEPTION
 15 --异常处理语句段
 16 WHEN NO_DATA_FOUND THEN dbe_output.print_line('NO_DATA_FOUND');
 17 END;
 18 /

0

PL/SQL procedure successfully completed.

SQL> 
SQL> drop table if exists FVT_FUCTION_GREATEST_TABLE_001;

Succeed.

SQL> drop table if exists FVT_FUCTION_GREATEST_TABLE_002;

Succeed.

SQL> --DTS2020032613322
SQL> drop table if exists t_datatype_20200326;

Succeed.

SQL> drop table if exists temp1_DTS2020032613322;

Succeed.

SQL> drop table if exists temp2_DTS2020032613322;

Succeed.

SQL> drop table if exists temp3_DTS2020032613322;

Succeed.

SQL> drop table if exists temp4_DTS2020032613322;

Succeed.

SQL> create table t_datatype_20200326(f1 varchar(2 char), f2 char(3 byte), f3 char(20 byte), f7 INTERVAL DAY(7) TO SECOND,f8 INTERVAL YEAR(2) TO MONTH,f9 INTERVAL DAY(2) TO SECOND,f10 INTERVAL YEAR(4) TO MONTH);

Succeed.

SQL> insert into t_datatype_20200326 values('环境','gfs','sdfdfdajmsmdsofdms',null,null,null,null);

1 rows affected.

SQL> desc -q select f1 from t_datatype_20200326 union all select f2 from t_datatype_20200326;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           VARCHAR(3 CHAR)                     

SQL> create table temp1_DTS2020032613322 as select f1 from t_datatype_20200326 union all select f2 from t_datatype_20200326;

Succeed.

SQL> desc -q select f2 from t_datatype_20200326 union all select f1 from t_datatype_20200326;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F2                                           VARCHAR(12 BYTE)                    

SQL> create table temp2_DTS2020032613322 as select f2 from t_datatype_20200326 union all select f1 from t_datatype_20200326;

Succeed.

SQL> desc -q select f1 from t_datatype_20200326 union all select f3 from t_datatype_20200326;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           VARCHAR(20 CHAR)                    

SQL> create table temp3_DTS2020032613322 as select f1 from t_datatype_20200326 union all select f3 from t_datatype_20200326;

Succeed.

SQL> desc -q select f3 from t_datatype_20200326 union all select f1 from t_datatype_20200326;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F3                                           VARCHAR(20 BYTE)                    

SQL> create table temp4_DTS2020032613322 as select f3 from t_datatype_20200326 union all select f1 from t_datatype_20200326;

Succeed.

SQL> desc -q select f7 from t_datatype_20200326 union all select f9 from t_datatype_20200326;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F7                                           INTERVAL DAY(7) TO SECOND(6)        

SQL> desc -q select f9 from t_datatype_20200326 union all select f7 from t_datatype_20200326;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F9                                           INTERVAL DAY(7) TO SECOND(6)        

SQL> desc -q select f8 from t_datatype_20200326 union all select f10 from t_datatype_20200326;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F8                                           INTERVAL YEAR(4) TO MONTH           

SQL> desc -q select f10 from t_datatype_20200326 union all select f8 from t_datatype_20200326;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F10                                          INTERVAL YEAR(4) TO MONTH           

SQL> drop table t_datatype_20200326;

Succeed.

SQL> drop table temp1_DTS2020032613322;

Succeed.

SQL> drop table temp2_DTS2020032613322;

Succeed.

SQL> drop table temp3_DTS2020032613322;

Succeed.

SQL> drop table temp4_DTS2020032613322;

Succeed.

SQL> 
SQL> -- DTS202010100I8GVTP1E00
SQL> drop table if exists test_DTS202010100I8GVTP1E00;

Succeed.

SQL> create table test_DTS202010100I8GVTP1E00(f1 real, f2 number, f3 decimal);

Succeed.

SQL> insert into test_DTS202010100I8GVTP1E00 values(2.0e+128, 123.456, 456.78);

1 rows affected.

SQL> commit;

Succeed.

SQL> select case when f1 < 0 then f2 else f1 end from test_DTS202010100I8GVTP1E00;

CASE WHEN F1 < 0 THEN F2 ELSE F1 END
------------------------------------
2e+128                              

1 rows fetched.

SQL> desc -q select case when f1 < 0 then f2 else f1 end from test_DTS202010100I8GVTP1E00;

Name                                    Null?    Type                                
--------------------------------------- -------- ------------------------------------
CASE WHEN F1 < 0 THEN F2 ELSE F1 END             BINARY_DOUBLE                       

SQL> select case when f1 < 0 then f3 else f1 end from test_DTS202010100I8GVTP1E00;

CASE WHEN F1 < 0 THEN F3 ELSE F1 END
------------------------------------
2e+128                              

1 rows fetched.

SQL> desc -q select case when f1 < 0 then f3 else f1 end from test_DTS202010100I8GVTP1E00;

Name                                    Null?    Type                                
--------------------------------------- -------- ------------------------------------
CASE WHEN F1 < 0 THEN F3 ELSE F1 END             BINARY_DOUBLE                       

SQL> drop table if exists test_DTS202010100I8GVTP1E00;

Succeed.

SQL> 
SQL> drop table if exists test_array;

Succeed.

SQL> create table test_array(f1 int[], f2 bigint[], f3 real[], f4 number[], f5 decimal[]);

Succeed.

SQL> insert into test_array values(array[1, 2], array[111111111111111111, 22222222222222222], array[2.0e+128, 3.0e+128], array[111.111, 222.222], array[11.11, 22.22]);

1 rows affected.

SQL> commit;

Succeed.

SQL> select case when f2[1] < 0 then f1 else f2 end from test_array;

CASE WHEN F2[1] < 0 THEN F1 ELSE F2 END                         
----------------------------------------------------------------
{111111111111111111,22222222222222222}                          

1 rows fetched.

SQL> desc -q select case when f2[1] < 0 then f1 else f2 end from test_array;

Name                                       Null?    Type                                
------------------------------------------ -------- ------------------------------------
CASE WHEN F2[1] < 0 THEN F1 ELSE F2 END             BINARY_BIGINT[]                     

SQL> select case when f3[1] < 0 then f4 else f3 end from test_array;

CASE WHEN F3[1] < 0 THEN F4 ELSE F3 END                         
----------------------------------------------------------------
{2e+128,3e+128}                                                 

1 rows fetched.

SQL> desc -q select case when f3[1] < 0 then f4 else f3 end from test_array;

Name                                       Null?    Type                                
------------------------------------------ -------- ------------------------------------
CASE WHEN F3[1] < 0 THEN F4 ELSE F3 END             BINARY_DOUBLE[]                     

SQL> select case when f3[1] < 0 then f5 else f3 end from test_array;

CASE WHEN F3[1] < 0 THEN F5 ELSE F3 END                         
----------------------------------------------------------------
{2e+128,3e+128}                                                 

1 rows fetched.

SQL> desc -q select case when f3[1] < 0 then f5 else f3 end from test_array;

Name                                       Null?    Type                                
------------------------------------------ -------- ------------------------------------
CASE WHEN F3[1] < 0 THEN F5 ELSE F3 END             BINARY_DOUBLE[]                     

SQL> drop table if exists test_array;

Succeed.

SQL> 
SQL> -- datatype compare
SQL> drop table if exists datatype_cmp_t;

Succeed.

SQL> create table datatype_cmp_t
  2 (
  3     f1 integer, f2 binary_uint32, f3 bigint, f4 binary_double, f5 double, f6 float, f7 real, f8 number(12,3), f9 decimal(20,5), f10 char(30), f11 nchar(30), f12 varchar(30), 
  4     f13 varchar2(30), f14 nvarchar(30), f15 date, f16 datetime, f17 timestamp, f18 timestamp(3) with time zone, f19 timestamp(3) with local time zone, f20 boolean, 
  5     f21 interval year(4) to month, f22 interval day(7) to second(6), f23 int[], f24 binary(20), f25 varbinary(20), f26 raw(100), f27 clob, f28 blob, f29 image
  6 );

Succeed.

SQL> 
SQL> select f1 from datatype_cmp_t where f1 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f1 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f2 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f2 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f3 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f3 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f4 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f4 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f8 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f8 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f10 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f10 = f28;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f10 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f12 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f12 = f28;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f12 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f15 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f15 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f17 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f17 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f18 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f18 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f19 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f19 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f20 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f20 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f21 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f21 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f22 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f22 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f24 = f7;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f24 = f8;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f24 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f24 = f28;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f24 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f25 = f1;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f25 = f2;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f25 = f3;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f25 = f4;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f25 = f8;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f25 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f25 = f28;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f25 = f29;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f26 = f27;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f26 = f28;

F1          
------------

0 rows fetched.

SQL> select f1 from datatype_cmp_t where f26 = f29;

F1          
------------

0 rows fetched.

SQL> 
SQL> drop table datatype_cmp_t;

Succeed.

SQL> 
SQL> -- DTS202101040IA7VDP1300
SQL> drop table if exists t_base_vchar3;

Succeed.

SQL> CREATE TABLE t_base_vchar3
  2 (id int,
  3  c_vchar1 binary(20),
  4  c_vchar2 binary(20),
  5  c_int3   int,
  6  c_vchar4 varbinary(20),
  7  c_vchar5 varbinary(20)
  8 );

Succeed.

SQL> INSERT INTO t_base_vchar3 values (1,'115',115,'115','115','115');

1 rows affected.

SQL> INSERT INTO t_base_vchar3 values (2,'26',26,'26','26','26');

1 rows affected.

SQL> INSERT INTO t_base_vchar3 values (3,'120',120,'120','120','120');

1 rows affected.

SQL> INSERT INTO t_base_vchar3 values (4,'10.0',15,'15.0','15.0','15.0');

1 rows affected.

SQL> INSERT INTO t_base_vchar3 values (5,'120.1',120,'120.1','120.1','120.1');

1 rows affected.

SQL> INSERT INTO t_base_vchar3 values (6,'-120.3',121,'120.3','120.3','120.3');

1 rows affected.

SQL> INSERT INTO t_base_vchar3 values (7,'120.4',123,'120.4','120.4','120.4');

1 rows affected.

SQL> INSERT INTO t_base_vchar3 values (8,'120.5',120,'120.5','120.5','120.5');

1 rows affected.

SQL> INSERT INTO t_base_vchar3 values (9,'1115',1115,'1115','1115','1115');

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> create index idx_c_vchar2_1 on t_base_vchar3 (c_vchar2);

Succeed.

SQL> create index idx_c_vchar2_2 on t_base_vchar3 (c_int3);

Succeed.

SQL>
SQL> -- binary cache
SQL> drop table if exists binary_cache_t;

Succeed.

SQL> create table binary_cache_t(c1 int, c2 bigint, c3 binary(20));

Succeed.

SQL> insert into binary_cache_t values(1,2,'1');

1 rows affected.

SQL> insert into binary_cache_t values(2,3,'2');

1 rows affected.

SQL> select c1,c2 from binary_cache_t t1 where c2 >=any(select c3 from binary_cache_t where c1 < 10) order by 1,2;

C1           C2                  
------------ --------------------
1            2                   
2            3                   

2 rows fetched.

SQL> drop table binary_cache_t;

Succeed.

SQL> --20210730
SQL> drop table if exists temp_0730;

Succeed.

SQL> create table temp_0730(f1 tinyint unsigned);

Succeed.

SQL> insert into temp_0730 values(-1);

CT-00659, UNSIGNED INTEGER out of range
SQL> drop table temp_0730;

Succeed.

SQL> create table temp_0730(f1 smallint unsigned);

Succeed.

SQL> insert into temp_0730 values(-1);

CT-00659, UNSIGNED INTEGER out of range
SQL> drop table temp_0730;

Succeed.

SQL> alter database set time_zone='+08:00';

Succeed.

SQL> alter database set time_zone='+00:00';

Succeed.

SQL> 


